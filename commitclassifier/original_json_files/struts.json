{
    "full_name": "apache/struts",
    "name": "struts",
    "description": "Mirror of Apache Struts",
    "id": 15928650,
    "url": "https://api.github.com/repos/apache/struts",
    "pulls": [
        {
            "url": "https://api.github.com/repos/apache/struts/pulls/430",
            "number": 430,
            "title": "WW-5084: Add Content Security Policy support to Struts",
            "issue_key": [
                "WW-5084"
            ],
            "issue": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13318494",
                    "id": "13318494",
                    "key": "WW-5084",
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                        "name": "New Feature"
                    },
                    "labels": [],
                    "description": "We'd like to add built-in Content Security Policy support to Struts2 to provide a major security mechanism that developers can use to protect against common Cross-Site Scripting vulnerabilities. Developers will have the ability to enable CSP in report-only or enforcement mode.\r\n\r\nWe will provide an out of the box tag that can be used by developers to use/import scripts in their web applications, so that these will automatically get nonces that are compatible with their Content Security policies.\r\n\r\nFinally, we will provide a built-in handler for CSP violation reports that will be used to collect and provide textual explanations of these reports. This endpoint will be used by developers to debug CSP violations and locate pieces of code that need to be refactored to support strong policies.",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "name": "Resolved"
                    },
                    "created": "2020-07-21T13:17:21.000+0000",
                    "updated": "2022-12-01T09:27:33.000+0000",
                    "resolved": null,
                    "prlinks": [
                        "https://github.com/salcho/struts/pull/6",
                        "https://github.com/struts-community-plugins/struts2-jquery/pull/318",
                        "https://github.com/apache/struts/pull/429",
                        "https://github.com/apache/struts/pull/430"
                    ],
                    "commitlinks": [],
                    "commits": null
                }
            ],
            "commits": [
                {
                    "sha": "4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                    "message": "Cspinterceptor (#2)\n\nSupport for CSP in Struts 2:\r\n\r\n- Implements a CSP Interceptor that adds a nonce-based, strict-dynamic policy to HTTP responses.\r\n- Implements custom JSP and FTL <script> tags that add nonces to script blocks automatically. This makes these tags compatible with CSP with minimal refactoring.\r\n- Implements an extensible action that can be used to collect CSP reports out of the box. This behaviour is extensible, so developers can customise the processing of CSP reports. \r\n\r\nCo-authored-by: Ecenaz Jen Ozmen <eo2419@columbia.edu>\r\nCo-authored-by: Giannis Chatziveroglou <giannisc@google.com>\r\nCo-authored-by: Sal <salchoman@gmail.com>",
                    "files": [
                        {
                            "sha": "e6f4a05f3fd16ad1c34258e0e6d0648d75e754f0",
                            "filename": "core/src/main/java/org/apache/struts2/action/CspReportAction.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCspReportAction.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCspReportAction.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/CspReportAction.java b/core/src/main/java/org/apache/struts2/action/CspReportAction.java\nnew file mode 100644\nindex 000000000..e6f4a05f3\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/CspReportAction.java\n@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import com.opensymphony.xwork2.ActionSupport;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+\n+import static org.apache.struts2.interceptor.csp.CspSettings.CSP_REPORT_TYPE;\n+\n+/**\n+ * An abstract Action that can be extended to process the incoming CSP violation reports. Performs\n+ * necessary checks to extract the JSON string of the CSP report and make sure it's a valid report.\n+ * Always returns a 204 response.\n+ *\n+ * Override the <code>processReport(String jsonCspReport)</code> method to customize how the action processes\n+ * the CSP report. See {@link DefaultCspReportAction} for the default implementation.\n+ *\n+ * Add the action to the endpoint that is the <code>reportUri</code> in the {@link org.apache.struts2.interceptor.csp.CspInterceptor}\n+ * to collect the reports.\n+ *\n+ * <pre>\n+ *     &lt;package name=\"csp-reports\" namespace=\"/\" extends=\"struts-default\"&gt;\n+ *         &lt;action name=\"csp-reports\" class=\"org.apache.struts2.action.DefaultCspReportAction\"&gt;\n+ *             &lt;result type=\"httpheader\"&gt;\n+ *                 &lt;param name=\"statusCode\">200&lt;/param&gt;\n+ *             &lt;/result&gt;\n+ *         &lt;/action&gt;\n+ *     &lt;/package&gt;\n+ * </pre>\n+ *\n+ * @see DefaultCspReportAction\n+ */\n+public abstract class CspReportAction extends ActionSupport implements ServletRequestAware, ServletResponseAware {\n+    private HttpServletRequest request;\n+\n+    public String execute() throws IOException {\n+        return \"success\";\n+    }\n+\n+    @Override\n+    public void withServletRequest(HttpServletRequest request) {\n+        if (!isCspReportRequest(request)) {\n+            return;\n+        }\n+\n+        try {\n+            BufferedReader reader = request.getReader();\n+            String cspReport = reader.readLine();\n+            processReport(cspReport);\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    private boolean isCspReportRequest(HttpServletRequest request) {\n+        if (!\"POST\".equals(request.getMethod()) || request.getContentLength() <= 0){\n+            return false;\n+        }\n+\n+        String contentType = request.getContentType();\n+        return CSP_REPORT_TYPE.equals(contentType);\n+    }\n+\n+    @Override\n+    public void withServletResponse(HttpServletResponse response) {\n+        response.setStatus(204);\n+    }\n+\n+    abstract void processReport(String jsonCspReport);\n+\n+    public void setServletRequest(HttpServletRequest request) {\n+        this.request = request;\n+    }\n+\n+    public HttpServletRequest getServletRequest() {\n+        return request;\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "3bae9f0ee80647c527763caf635e524eb96a27eb",
                            "filename": "core/src/main/java/org/apache/struts2/action/DefaultCspReportAction.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FDefaultCspReportAction.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FDefaultCspReportAction.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/DefaultCspReportAction.java b/core/src/main/java/org/apache/struts2/action/DefaultCspReportAction.java\nnew file mode 100644\nindex 000000000..3bae9f0ee\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/DefaultCspReportAction.java\n@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * The default implementation of {@link CspReportAction} that simply logs the JSON object\n+ * that contains the details of the CSP violation.\n+ *\n+ * @see CspReportAction\n+ */\n+public class DefaultCspReportAction extends CspReportAction {\n+\n+    protected static final Logger LOG = LogManager.getLogger(DefaultCspReportAction.class);\n+\n+    @Override\n+    void processReport(String jsonCspReport) {\n+        LOG.error(jsonCspReport);\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "4345c50e1f446971919b974ffbaec0a28b24e561",
                            "filename": "core/src/main/java/org/apache/struts2/components/Link.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fcomponents%2FLink.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fcomponents%2FLink.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/components/Link.java b/core/src/main/java/org/apache/struts2/components/Link.java\nnew file mode 100644\nindex 000000000..4345c50e1\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/components/Link.java\n@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.struts2.components;\n+\n+import com.opensymphony.xwork2.util.ValueStack;\n+import org.apache.struts2.views.annotations.StrutsTag;\n+import org.apache.struts2.views.annotations.StrutsTagAttribute;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * <p>\n+ * Add nonce propagation feature to implement CSP in link tags\n+ * </p>\n+ *\n+ * <p>\n+ * The link tag allows the user to load external resources, most usually style sheets. External resources\n+ * can inject malicious code and perform XSS and data injection attacks. The s:link tag includes a nonce\n+ * attribute that is being randomly generated with each request and only allows links with the valid\n+ * nonce value to be executed.\n+ * </p>\n+ *\n+ * <p><b>Examples</b></p>\n+ *\n+ * <pre>\n+ *\n+ * &lt;s:link ... /&gt;\n+ *\n+ * </pre>\n+ *\n+ */\n+@StrutsTag(name=\"link\",\n+        tldTagClass=\"org.apache.struts2.views.jsp.ui.LinkTag\",\n+        description=\"Link tag automatically adds nonces to link elements - should be used in combination with Struts' CSP Interceptor.\",\n+        allowDynamicAttributes=true)\n+public class Link extends UIBean{\n+\n+    private static final String TEMPLATE=\"link\";\n+\n+    protected String href;\n+    protected String hreflang;\n+    protected String rel;\n+    protected String media;\n+    protected String referrerpolicy;\n+    protected String sizes;\n+    protected String crossorigin;\n+    protected String type;\n+    protected String as;\n+\n+    public Link(ValueStack stack, HttpServletRequest request, HttpServletResponse response) {\n+        super(stack, request, response);\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link href attribute\")\n+    public void setHref(String href) {\n+        this.href = href;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link hreflang attribute\")\n+    public void setHreflang(String hreflang) {\n+        this.hreflang = hreflang;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link rel attribute\")\n+    public void setRel(String rel) {\n+        this.rel = rel;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link sizes attribute\")\n+    public void setSizes(String sizes) {\n+        this.sizes = sizes;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link crossorigin attribute\")\n+    public void setCrossorigin(String crossorigin) {\n+        this.crossorigin = crossorigin;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link type attribute\")\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link as attribute\")\n+    public void setAs(String as) {\n+        this.as = as;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link media attribute\")\n+    public void setMedia(String media) {\n+        this.media = media;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML link referrerpolicy attribute\")\n+    public void setReferrerpolicy(String referrerpolicy) {\n+        this.referrerpolicy = referrerpolicy;\n+    }\n+\n+    @Override\n+    protected String getDefaultTemplate() {\n+        return TEMPLATE;\n+    }\n+\n+    @Override\n+    protected void evaluateExtraParams() {\n+        super.evaluateExtraParams();\n+\n+        if (href != null) {\n+            addParameter(\"href\", findString(href));\n+        }\n+\n+        if (hreflang != null) {\n+            addParameter(\"hreflang\", findString(hreflang));\n+        }\n+\n+        if (rel != null) {\n+            addParameter(\"rel\", findString(rel));\n+        }\n+\n+        if (media != null) {\n+            addParameter(\"media\", findString(media));\n+        }\n+\n+        if (referrerpolicy != null) {\n+            addParameter(\"referrerpolicy\", findString(referrerpolicy));\n+        }\n+\n+        if (sizes != null) {\n+            addParameter(\"sizes\", findString(sizes));\n+        }\n+\n+        if (crossorigin != null) {\n+            addParameter(\"crossorigin\", findString(crossorigin));\n+        }\n+\n+        if (type != null) {\n+            addParameter(\"type\", findString(type));\n+        }\n+\n+        if (as != null) {\n+            addParameter(\"as\", findString(as));\n+        }\n+\n+        if (disabled != null) {\n+            addParameter(\"disabled\", findString(disabled));\n+        }\n+\n+        if (title != null) {\n+            addParameter(\"title\", findString(title));\n+        }\n+\n+        if (stack.getActionContext().getSession().containsKey(\"nonce\")) {\n+            String nonceValue = stack.getActionContext().getSession().get(\"nonce\").toString();\n+            addParameter(\"nonce\", nonceValue);\n+        }\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "f2a208193a11a2037edeb5fc22d7affbbfb1aea4",
                            "filename": "core/src/main/java/org/apache/struts2/components/Script.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fcomponents%2FScript.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fcomponents%2FScript.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/components/Script.java b/core/src/main/java/org/apache/struts2/components/Script.java\nnew file mode 100644\nindex 000000000..f2a208193\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/components/Script.java\n@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.components;\n+\n+import com.opensymphony.xwork2.util.ValueStack;\n+import org.apache.struts2.views.annotations.StrutsTag;\n+import org.apache.struts2.views.annotations.StrutsTagAttribute;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+\n+/**\n+ * <p>\n+ * Add nonce propagation feature to implement CSP in script tags\n+ * </p>\n+ *\n+ * <p>\n+ * The script tag allows the user to execute JavaScript. It also allows external resources to execute\n+ * scripts which can be malicious. The s:script tag includes a nonce attribute that is being randomly\n+ * generated with each request and only allows scripts with the valid nonce value to be executed.\n+ * </p>\n+ *\n+ * <p><b>Examples</b></p>\n+ *\n+ * <pre>\n+ *\n+ * &lt;s:script ... /&gt;\n+ *\n+ * </pre>\n+ *\n+ */\n+@StrutsTag(name=\"script\",\n+        tldTagClass=\"org.apache.struts2.views.jsp.ui.ScriptTag\",\n+        description=\"Script tag automatically adds nonces to script blocks - should be used in combination with Struts' CSP Interceptor.\",\n+        allowDynamicAttributes=true)\n+public class Script extends ClosingUIBean {\n+\n+    protected String async;\n+    protected String charset;\n+    protected String defer;\n+    protected String src;\n+    protected String type;\n+    protected String referrerpolicy;\n+    protected String nomodule;\n+    protected String integrity;\n+    protected String crossorigin;\n+\n+    private static final String TEMPLATE = \"script-close\";\n+    private static final String OPEN_TEMPLATE = \"script\";\n+\n+    public Script(ValueStack stack, HttpServletRequest request, HttpServletResponse response) {\n+        super(stack, request, response);\n+    }\n+\n+    @Override\n+    public String getDefaultOpenTemplate() {\n+        return OPEN_TEMPLATE;\n+    }\n+\n+    @Override\n+    protected String getDefaultTemplate() {\n+        return TEMPLATE;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script async attribute\")\n+    public void setAsync(String async) {\n+        this.async = async;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script charset attribute\")\n+    public void setCharset(String charset) {\n+        this.charset = charset;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script defer attribute\")\n+    public void setDefer(String defer) {\n+        this.defer = defer;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script src attribute\")\n+    public void setSrc(String src) {\n+        this.src = src;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script type attribute\")\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script referrerpolicy attribute\")\n+    public void setReferrerpolicy(String referrerpolicy) {\n+        this.referrerpolicy = referrerpolicy;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script nomodule attribute\")\n+    public void setNomodule(String nomodule) {\n+        this.nomodule = nomodule;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script integrity attribute\")\n+    public void setIntegrity(String integrity) {\n+        this.integrity = integrity;\n+    }\n+\n+    @StrutsTagAttribute(description=\"HTML script crossorigin attribute\")\n+    public void setCrossorigin(String crossorigin) {\n+        this.crossorigin = crossorigin;\n+    }\n+\n+    @Override\n+    public boolean usesBody() {\n+        return true;\n+    }\n+    \n+    @Override\n+    protected void evaluateExtraParams() {\n+        super.evaluateExtraParams();\n+\n+        if (async != null) {\n+            addParameter(\"async\", findString(async));\n+        }\n+\n+        if (charset != null) {\n+            addParameter(\"charset\", findString(charset));\n+        }\n+\n+        if (defer != null) {\n+            addParameter(\"defer\", findString(defer));\n+        }\n+\n+        if (src != null) {\n+            addParameter(\"src\", findString(src));\n+        }\n+\n+        if (type != null) {\n+            addParameter(\"type\", findString(type));\n+        }\n+\n+        if (referrerpolicy != null) {\n+            addParameter(\"referrerpolicy\", findString(referrerpolicy));\n+        }\n+\n+        if (nomodule != null) {\n+            addParameter(\"nomodule\", findString(nomodule));\n+        }\n+\n+        if (integrity != null) {\n+            addParameter(\"integrity\", findString(integrity));\n+        }\n+\n+        if (crossorigin != null) {\n+            addParameter(\"crossorigin\", findString(crossorigin));\n+        }\n+\n+        if (stack.getActionContext().getSession().containsKey(\"nonce\")) {\n+            String nonceValue = stack.getActionContext().getSession().get(\"nonce\").toString();\n+            addParameter(\"nonce\", nonceValue);\n+        }\n+    }\n+\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "f70b0c63fb99c1170c7bf94c99428013fe11bf8a",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2Fcsp%2FCspInterceptor.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2Fcsp%2FCspInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java\nnew file mode 100644\nindex 000000000..f70b0c63f\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java\n@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.interceptor.csp;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.interceptor.AbstractInterceptor;\n+import com.opensymphony.xwork2.interceptor.PreResultListener;\n+import java.net.URI;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Interceptor that implements Content Security Policy on incoming requests used to protect against\n+ * common XSS and data injection attacks. Uses {@link CspSettings} to add appropriate Content Security Policy header\n+ * to the response. These headers determine what the browser will consider a policy violation and the browser's behavior\n+ * when a violation occurs. A detailed explanation of CSP can be found <a href=\"https://csp.withgoogle.com/docs/index.html\">here</a>.\n+ *\n+ * @see <a href=\"https://csp.withgoogle.com/docs/index.html\">https://csp.withgoogle.com/docs/index.html/</a>\n+ * @see CspSettings\n+ * @see DefaultCspSettings\n+ **/\n+public final class CspInterceptor extends AbstractInterceptor implements PreResultListener {\n+    private final CspSettings settings = new DefaultCspSettings();\n+\n+    @Override\n+    public String intercept(ActionInvocation invocation) throws Exception {\n+        invocation.addPreResultListener(this);\n+        return invocation.invoke();\n+    }\n+\n+    public void beforeResult(ActionInvocation invocation, String resultCode) {\n+        HttpServletResponse response = invocation.getInvocationContext().getServletResponse();\n+        settings.addCspHeaders(response);\n+    }\n+\n+    public void setReportUri(String reportUri) {\n+        Optional<URI> uri = buildUri(reportUri);\n+        if (!uri.isPresent()) {\n+            throw new IllegalArgumentException(\"Could not parse configured report URI for CSP interceptor: \" + reportUri);\n+        }\n+\n+        if (!uri.get().isAbsolute() && !reportUri.startsWith(\"/\")) {\n+            throw new IllegalArgumentException(\"Illegal configuration: report URI is not relative to the root. Please set a report URI that starts with /\");\n+        }\n+\n+        settings.setReportUri(reportUri);\n+    }\n+\n+    private static Optional<URI> buildUri(String reportUri) {\n+        try {\n+            return Optional.of(URI.create(reportUri));\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    public void setEnforcingMode(String value){\n+        boolean enforcingMode = Boolean.parseBoolean(value);\n+        settings.setEnforcingMode(enforcingMode);\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "9699ab291864999d306cef6f072154eaecdf7b60",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/csp/CspSettings.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2Fcsp%2FCspSettings.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2Fcsp%2FCspSettings.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/csp/CspSettings.java b/core/src/main/java/org/apache/struts2/interceptor/csp/CspSettings.java\nnew file mode 100644\nindex 000000000..9699ab291\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/interceptor/csp/CspSettings.java\n@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.interceptor.csp;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * CspSettings interface used by the {@link CspInterceptor} to add the CSP header to the response.\n+ * The default implementation can be found in {@link DefaultCspSettings}.\n+ *\n+ * @see DefaultCspSettings\n+ */\n+public interface CspSettings {\n+\n+    int NONCE_RANDOM_LENGTH = 18;\n+\n+    String CSP_ENFORCE_HEADER = \"Content-Security-Policy\";\n+    String CSP_REPORT_HEADER = \"Content-Security-Policy-Report-Only\";\n+    String OBJECT_SRC = \"object-src\";\n+    String SCRIPT_SRC = \"script-src\";\n+    String BASE_URI = \"base-uri\";\n+    String REPORT_URI = \"report-uri\";\n+    String NONE = \"none\";\n+    String STRICT_DYNAMIC = \"strict-dynamic\";\n+    String HTTP = \"http:\";\n+    String HTTPS = \"https:\";\n+    String CSP_REPORT_TYPE = \"application/csp-report\";\n+\n+    void addCspHeaders(HttpServletResponse response);\n+    // sets the uri where csp violation reports will be sent\n+    void setReportUri(String uri);\n+    // sets CSP headers in enforcing mode when true, and report-only when false\n+    void setEnforcingMode(boolean value);\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "9a3f764a8a8130f34efa8181055a3cfcdc3042e3",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/csp/DefaultCspSettings.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2Fcsp%2FDefaultCspSettings.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2Fcsp%2FDefaultCspSettings.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/csp/DefaultCspSettings.java b/core/src/main/java/org/apache/struts2/interceptor/csp/DefaultCspSettings.java\nnew file mode 100644\nindex 000000000..9a3f764a8\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/interceptor/csp/DefaultCspSettings.java\n@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.interceptor.csp;\n+\n+import static java.lang.String.format;\n+\n+import com.opensymphony.xwork2.ActionContext;\n+\n+import java.util.function.Supplier;\n+import javax.servlet.http.HttpServletResponse;\n+import java.security.SecureRandom;\n+import java.util.Base64;\n+import java.util.Map;\n+\n+\n+/**\n+ * Default implementation of {@link CspSettings}.\n+ * The default policy implements strict CSP with a nonce based approach and follows the guide: <a href=\"https://csp.withgoogle.com/docs/index.html\">https://csp.withgoogle.com/docs/index.html/</a>\n+ *\n+ * @see CspSettings\n+ * @see CspInterceptor\n+ */\n+public class DefaultCspSettings implements CspSettings {\n+    private final SecureRandom sRand  = new SecureRandom();\n+    // this lazy supplier computes a policy format the first time it's called and caches the result\n+    // to reduce string operations when attaching policies to HTTP responses\n+    private final Supplier<String> lazyPolicyBuilder = new Supplier<String>() {\n+        boolean hasBeenCalled;\n+        String policyFormat;\n+\n+        @Override\n+        public String get() {\n+            if (!hasBeenCalled) {\n+                StringBuilder policyFormatBuilder = new StringBuilder()\n+                    .append(OBJECT_SRC)\n+                    .append(format(\" '%s'; \", NONE))\n+                    .append(SCRIPT_SRC)\n+                    .append(\" 'nonce-%s' \")             // nonce placeholder\n+                    .append(format(\"'%s' \", STRICT_DYNAMIC))\n+                    .append(format(\"%s %s; \", HTTP, HTTPS))\n+                    .append(BASE_URI)\n+                    .append(format(\" '%s'; \", NONE));\n+\n+                if (reportUri != null) {\n+                    policyFormatBuilder\n+                        .append(REPORT_URI)\n+                        .append(format(\" %s\", reportUri));\n+                }\n+\n+                policyFormat = policyFormatBuilder.toString();\n+            }\n+\n+            return format(policyFormat, getNonceString());\n+        }\n+    };\n+\n+    private String reportUri;\n+    // default to reporting mode\n+    private String cspHeader = CSP_REPORT_HEADER;\n+\n+    public void addCspHeaders(HttpServletResponse response) {\n+        associateNonceWithSession();\n+        response.setHeader(cspHeader, lazyPolicyBuilder.get());\n+    }\n+\n+    private String getNonceString() {\n+        Map<String, Object> session = ActionContext.getContext().getSession();\n+        return (String) session.get(\"nonce\");\n+    }\n+\n+    private void associateNonceWithSession() {\n+        Map<String, Object> session = ActionContext.getContext().getSession();\n+        String nonceValue = Base64.getUrlEncoder().encodeToString(getRandomBytes());\n+        session.put(\"nonce\", nonceValue);\n+    }\n+\n+    private byte[] getRandomBytes() {\n+        byte[] ret = new byte[NONCE_RANDOM_LENGTH];\n+        sRand.nextBytes(ret);\n+        return ret;\n+    }\n+\n+    public void setEnforcingMode(boolean enforcingMode) {\n+        if (enforcingMode) {\n+            cspHeader = CSP_ENFORCE_HEADER;\n+        }\n+    }\n+\n+    public void setReportUri(String reportUri) {\n+        this.reportUri = reportUri;\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "4d4aaac4087a039aab7b7a3c225061c0875c6313",
                            "filename": "core/src/main/java/org/apache/struts2/views/jsp/ui/LinkTag.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjsp%2Fui%2FLinkTag.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjsp%2Fui%2FLinkTag.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/views/jsp/ui/LinkTag.java b/core/src/main/java/org/apache/struts2/views/jsp/ui/LinkTag.java\nnew file mode 100644\nindex 000000000..4d4aaac40\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/views/jsp/ui/LinkTag.java\n@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.views.jsp.ui;\n+\n+import com.opensymphony.xwork2.util.ValueStack;\n+import org.apache.struts2.components.Component;\n+import org.apache.struts2.components.Link;\n+import org.apache.struts2.components.Script;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * @see Link\n+ */\n+public class LinkTag extends AbstractUITag {\n+\n+    protected String href;\n+    protected String hreflang;\n+    protected String rel;\n+    protected String media;\n+    protected String referrerpolicy;\n+    protected String sizes;\n+    protected String crossorigin;\n+    protected String type;\n+    protected String as;\n+\n+    @Override\n+    public Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n+        return new Link(stack, req, res);\n+    }\n+\n+    protected void populateParams() {\n+        super.populateParams();\n+        Link link = ((Link) component);\n+        link.setHref(href);\n+        link.setHreflang(hreflang);\n+        link.setRel(rel);\n+        link.setDisabled(disabled);\n+        link.setMedia(media);\n+        link.setReferrerpolicy(referrerpolicy);\n+        link.setSizes(sizes);\n+        link.setCrossorigin(crossorigin);\n+        link.setType(type);\n+        link.setAs(as);\n+        link.setTitle(title);\n+    }\n+\n+    public void setHref(String href) {\n+        this.href = href;\n+    }\n+\n+    public void setHreflang(String hreflang) {\n+        this.hreflang = hreflang;\n+    }\n+\n+    public void setRel(String rel) {\n+        this.rel = rel;\n+    }\n+\n+    public void setSizes(String sizes) {\n+        this.sizes = sizes;\n+    }\n+\n+    public void setCrossorigin(String crossorigin) {\n+        this.crossorigin = crossorigin;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public void setAs(String as) {\n+        this.as = as;\n+    }\n+\n+    public void setMedia(String media) {\n+        this.media = media;\n+    }\n+\n+    public void setReferrerpolicy(String referrerpolicy) {\n+        this.referrerpolicy = referrerpolicy;\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "40ca19e8cad782449bf14a1f5a10f89ad0e4fee1",
                            "filename": "core/src/main/java/org/apache/struts2/views/jsp/ui/ScriptTag.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjsp%2Fui%2FScriptTag.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjsp%2Fui%2FScriptTag.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/views/jsp/ui/ScriptTag.java b/core/src/main/java/org/apache/struts2/views/jsp/ui/ScriptTag.java\nnew file mode 100644\nindex 000000000..40ca19e8c\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/views/jsp/ui/ScriptTag.java\n@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.views.jsp.ui;\n+\n+import com.opensymphony.xwork2.util.ValueStack;\n+import org.apache.struts2.components.Component;\n+import org.apache.struts2.components.Form;\n+import org.apache.struts2.components.Script;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * @see Script\n+ */\n+public class ScriptTag extends AbstractUITag {\n+\n+    protected String async;\n+    protected String charset;\n+    protected String defer;\n+    protected String src;\n+    protected String type;\n+    protected String referrerpolicy;\n+    protected String nomodule;\n+    protected String integrity;\n+    protected String crossorigin;\n+\n+    @Override\n+    public Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {\n+        return new Script(stack, req, res);\n+    }\n+\n+    protected void populateParams() {\n+        super.populateParams();\n+        Script script = ((Script) component);\n+        script.setAsync(async);\n+        script.setCharset(charset);\n+        script.setDefer(defer);\n+        script.setSrc(src);\n+        script.setType(type);\n+        script.setReferrerpolicy(referrerpolicy);\n+        script.setNomodule(nomodule);\n+        script.setIntegrity(integrity);\n+        script.setCrossorigin(crossorigin);\n+    }\n+\n+    public void setAsync(String async) {\n+        this.async = async;\n+    }\n+\n+    public void setCharset(String charset) {\n+        this.charset = charset;\n+    }\n+\n+    public void setSrc(String src) {\n+        this.src = src;\n+    }\n+\n+    public void setDefer(String defer) {\n+        this.defer = defer;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public void setReferrerpolicy(String referrerpolicy) {\n+        this.referrerpolicy = referrerpolicy;\n+    }\n+\n+    public void setNomodule(String nomodule) {\n+        this.nomodule = nomodule;\n+    }\n+\n+    public void setIntegrity(String integrity) {\n+        this.integrity = integrity;\n+    }\n+\n+    public void setCrossorigin(String crossorigin) {\n+        this.crossorigin = crossorigin;\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "504be8bb4b2b705ef117b9fe204c14be160619c7",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/CspInterceptorTest.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCspInterceptorTest.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCspInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/CspInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/CspInterceptorTest.java\nnew file mode 100644\nindex 000000000..504be8bb4\n--- /dev/null\n+++ b/core/src/test/java/org/apache/struts2/interceptor/CspInterceptorTest.java\n@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.interceptor;\n+\n+import com.opensymphony.xwork2.ActionContext;\n+import com.opensymphony.xwork2.mock.MockActionInvocation;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.struts2.ServletActionContext;\n+import org.apache.struts2.StrutsInternalTestCase;\n+import org.apache.struts2.interceptor.csp.CspInterceptor;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.struts2.interceptor.csp.CspSettings.*;\n+\n+public class CspInterceptorTest extends StrutsInternalTestCase {\n+\n+    private final CspInterceptor interceptor = new CspInterceptor();\n+    private final MockActionInvocation mai = new MockActionInvocation();\n+    private final MockHttpServletRequest request = new MockHttpServletRequest();\n+    private final MockHttpServletResponse response = new MockHttpServletResponse();\n+    private final Map<String, Object> session = new HashMap<>();\n+\n+    public void test_whenRequestReceived_thenNonceIsSetInSession_andCspHeaderContainsIt() throws Exception {\n+        String reportUri = \"/barfoo\";\n+        String reporting = \"false\";\n+        interceptor.setReportUri(reportUri);\n+        interceptor.setEnforcingMode(reporting);\n+\n+        interceptor.intercept(mai);\n+\n+        assertTrue(\"Nonce key does not exist\", session.containsKey(\"nonce\"));\n+        assertFalse(\"Nonce value is empty\", Strings.isEmpty((String) session.get(\"nonce\")));\n+        checkHeader(reportUri, reporting);\n+    }\n+\n+    public void test_whenNonceAlreadySetInSession_andRequestReceived_thenNewNonceIsSet() throws Exception {\n+        String reportUri = \"https://www.google.com/\";\n+        String enforcingMode = \"true\";\n+        interceptor.setReportUri(reportUri);\n+        interceptor.setEnforcingMode(enforcingMode);\n+        session.put(\"nonce\", \"foo\");\n+\n+        interceptor.intercept(mai);\n+\n+        assertTrue(\"Nonce key does not exist\", session.containsKey(\"nonce\"));\n+        assertFalse(\"Nonce value is empty\", Strings.isEmpty((String) session.get(\"nonce\")));\n+        assertFalse(\"New nonce value couldn't be set\", session.get(\"nonce\").equals(\"foo\"));\n+        checkHeader(reportUri, enforcingMode);\n+    }\n+\n+    public void testEnforcingCspHeadersSet() throws Exception {\n+        String reportUri = \"/csp-reports\";\n+        String enforcingMode = \"true\";\n+        interceptor.setReportUri(reportUri);\n+        interceptor.setEnforcingMode(enforcingMode);\n+        session.put(\"nonce\", \"foo\");\n+\n+        interceptor.intercept(mai);\n+\n+        assertTrue(\"Nonce key does not exist\", session.containsKey(\"nonce\"));\n+        assertFalse(\"Nonce value is empty\", Strings.isEmpty((String) session.get(\"nonce\")));\n+        assertFalse(\"New nonce value couldn't be set\", session.get(\"nonce\").equals(\"foo\"));\n+        checkHeader(reportUri, enforcingMode);\n+    }\n+\n+    public void testReportingCspHeadersSet() throws Exception {\n+        String reportUri = \"/csp-reports\";\n+        String enforcingMode = \"false\";\n+        interceptor.setReportUri(reportUri);\n+        interceptor.setEnforcingMode(enforcingMode);\n+        session.put(\"nonce\", \"foo\");\n+\n+        interceptor.intercept(mai);\n+\n+        assertTrue(\"Nonce key does not exist\", session.containsKey(\"nonce\"));\n+        assertFalse(\"Nonce value is empty\", Strings.isEmpty((String) session.get(\"nonce\")));\n+        assertFalse(\"New nonce value couldn't be set\", session.get(\"nonce\").equals(\"foo\"));\n+        checkHeader(reportUri, enforcingMode);\n+    }\n+\n+    public void test_uriSetOnlyWhenSetIsCalled() throws Exception {\n+        String enforcingMode = \"false\";\n+        interceptor.setEnforcingMode(enforcingMode);\n+\n+        interceptor.intercept(mai);\n+        checkHeader(null, enforcingMode);\n+\n+//      set report uri\n+        String reportUri = \"/some-uri\";\n+        interceptor.setReportUri(reportUri);\n+        interceptor.intercept(mai);\n+        checkHeader(reportUri, enforcingMode);\n+    }\n+\n+    public void testCannotParseUri() throws Exception {\n+        String enforcingMode = \"false\";\n+        interceptor.setEnforcingMode(enforcingMode);\n+\n+        try{\n+            interceptor.setReportUri(\"ww w. google.@com\");\n+            assert(false);\n+        } catch (IllegalArgumentException e){\n+            assert(true);\n+        }\n+    }\n+\n+    public void testCannotParseRelativeUri() throws Exception {\n+        String enforcingMode = \"false\";\n+        interceptor.setEnforcingMode(enforcingMode);\n+\n+        try{\n+            interceptor.setReportUri(\"some-uri\");\n+            assert(false);\n+        } catch (IllegalArgumentException e){\n+            assert(true);\n+        }\n+    }\n+\n+    public void checkHeader(String reportUri, String enforcingMode){\n+        String expectedCspHeader = \"\";\n+        if (Strings.isEmpty(reportUri)) {\n+            expectedCspHeader = String.format(\"%s '%s'; %s 'nonce-%s' '%s' %s %s; %s '%s'; \",\n+                    OBJECT_SRC, NONE,\n+                    SCRIPT_SRC, session.get(\"nonce\"), STRICT_DYNAMIC, HTTP, HTTPS,\n+                    BASE_URI, NONE\n+            );\n+        } else {\n+            expectedCspHeader = String.format(\"%s '%s'; %s 'nonce-%s' '%s' %s %s; %s '%s'; %s %s\",\n+                    OBJECT_SRC, NONE,\n+                    SCRIPT_SRC, session.get(\"nonce\"), STRICT_DYNAMIC, HTTP, HTTPS,\n+                    BASE_URI, NONE,\n+                    REPORT_URI, reportUri\n+            );\n+        }\n+\n+        String header = \"\";\n+        if (enforcingMode.equals(\"true\")){\n+            header = response.getHeader(CSP_ENFORCE_HEADER);\n+        } else {\n+            header = response.getHeader(CSP_REPORT_HEADER);\n+        }\n+\n+        assertFalse(\"No CSP header exists\", Strings.isEmpty(header));\n+        assertEquals(\"Response headers do not contain nonce header\", expectedCspHeader, header);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        container.inject(interceptor);\n+        ServletActionContext.setRequest(request);\n+        ServletActionContext.setResponse(response);\n+        ActionContext context = ServletActionContext.getActionContext().bind();\n+        context.withSession(session);\n+        mai.setInvocationContext(context);\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "ecba64c560be997ce29c11ee6fde0bc874f1c81e",
                            "filename": "core/src/test/java/org/apache/struts2/views/jsp/ui/LinkTagTest.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjsp%2Fui%2FLinkTagTest.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjsp%2Fui%2FLinkTagTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/views/jsp/ui/LinkTagTest.java b/core/src/test/java/org/apache/struts2/views/jsp/ui/LinkTagTest.java\nnew file mode 100644\nindex 000000000..ecba64c56\n--- /dev/null\n+++ b/core/src/test/java/org/apache/struts2/views/jsp/ui/LinkTagTest.java\n@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.views.jsp.ui;\n+\n+import org.apache.struts2.views.jsp.AbstractUITagTest;\n+\n+import javax.servlet.jsp.JspException;\n+\n+public class LinkTagTest extends AbstractUITagTest {\n+\n+    private static final String NONCE_VAL = \"r4andom\";\n+\n+    public void testLinkTagAttributes() {\n+        LinkTag tag = new LinkTag();\n+\n+        tag.setHref(\"mysrc.js\");\n+        tag.setHreflang(\"test\");\n+        tag.setRel(\"module\");\n+        tag.setMedia(\"foo\");\n+        tag.setReferrerpolicy(\"test\");\n+        tag.setSizes(\"foo\");\n+        tag.setCrossorigin(\"same-origin\");\n+        tag.setType(\"anonymous\");\n+        tag.setAs(\"test\");\n+        tag.setDisabled(\"false\");\n+        tag.setTitle(\"test\");\n+\n+        doLinkTest(tag);\n+        String s = writer.toString();\n+\n+        assertTrue(\"Incorrect href attribute for link tag\", s.contains(\"href=\\\"mysrc.js\\\"\"));\n+        assertTrue(\"Incorrect hreflang attribute for link tag\", s.contains(\"hreflang=\\\"test\\\"\"));\n+        assertTrue(\"Incorrect rel attribute for link tag\", s.contains(\"rel=\\\"module\\\"\"));\n+        assertTrue(\"Incorrect media attribute for link tag\", s.contains(\"media=\\\"foo\\\"\"));\n+        assertTrue(\"Incorrect referrerpolicy attribute for link tag\", s.contains(\"referrerpolicy=\\\"test\\\"\"));\n+        assertTrue(\"Incorrect sizes attribute for link tag\", s.contains(\"sizes=\\\"foo\\\"\"));\n+        assertTrue(\"Incorrect crossorigin attribute for link tag\", s.contains(\"crossorigin=\\\"same-origin\\\"\"));\n+        assertTrue(\"Incorrect type attribute for link tag\", s.contains(\"type=\\\"anonymous\\\"\"));\n+        assertTrue(\"Incorrect as attribute for link tag\", s.contains(\"as=\\\"test\\\"\"));\n+        assertFalse(\"Non-existent disabled attribute for link tag\", s.contains(\"disabled\"));\n+        assertTrue(\"Incorrect title attribute for link tag\", s.contains(\"title=\\\"test\\\"\"));\n+        assertTrue(\"Incorrect nonce attribute for link tag\", s.contains(\"nonce=\\\"\" + NONCE_VAL+\"\\\"\"));\n+    }\n+\n+    private void doLinkTest(LinkTag tag) {\n+        //creating nonce value like the CspInterceptor does\n+        stack.getActionContext().getSession().put(\"nonce\", NONCE_VAL);\n+        tag.setPageContext(pageContext);\n+\n+        try {\n+            tag.doStartTag();\n+            tag.doEndTag();\n+        } catch (JspException e) {\n+            e.printStackTrace();\n+            fail();\n+        }\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "2509fea294f85812b4bba54d9e907e423cf0506b",
                            "filename": "core/src/test/java/org/apache/struts2/views/jsp/ui/ScriptTagTest.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjsp%2Fui%2FScriptTagTest.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjsp%2Fui%2FScriptTagTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/views/jsp/ui/ScriptTagTest.java b/core/src/test/java/org/apache/struts2/views/jsp/ui/ScriptTagTest.java\nnew file mode 100644\nindex 000000000..2509fea29\n--- /dev/null\n+++ b/core/src/test/java/org/apache/struts2/views/jsp/ui/ScriptTagTest.java\n@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.views.jsp.ui;\n+\n+\n+import org.apache.struts2.views.jsp.AbstractUITagTest;\n+\n+import javax.servlet.jsp.JspException;\n+\n+public class ScriptTagTest extends AbstractUITagTest {\n+\n+    private static final String NONCE_VAL = \"r4andom\";\n+\n+    public void testScriptTagAttributes() {\n+        ScriptTag tag = new ScriptTag();\n+\n+\n+        tag.setSrc(\"mysrc.js\");\n+        tag.setAsync(\"false\");\n+        tag.setType(\"module\");\n+        tag.setCharset(\"foo\");\n+        tag.setNomodule(\"true\");\n+        tag.setDefer(\"true\");\n+        tag.setReferrerpolicy(\"same-origin\");\n+        tag.setCrossorigin(\"anonymous\");\n+        tag.setIntegrity(\"test\");\n+\n+        doScriptTest(tag);\n+        String s = writer.toString();\n+        \n+        assertTrue(\"Incorrect src attribute for script tag\", s.contains(\"src=\\\"mysrc.js\\\"\"));\n+        assertFalse(\"Non-existent async attribute for script tag\", s.contains(\"async\"));\n+        assertTrue(\"Incorrect type attribute for script tag\", s.contains(\"type=\\\"module\\\"\"));\n+        assertTrue(\"Incorrect charset attribute for script tag\", s.contains(\"charset=\\\"foo\\\"\"));\n+        assertTrue(\"Non-existent nomodule attribute for script tag\", s.contains(\"nomodule\"));\n+        assertTrue(\"Non-existent defer attribute for script tag\", s.contains(\"defer\"));\n+        assertTrue(\"Incorrect referrerpolicy attribute for script tag\", s.contains(\"referrerpolicy=\\\"same-origin\\\"\"));\n+        assertTrue(\"Incorrect crossorigin attribute for script tag\", s.contains(\"crossorigin=\\\"anonymous\\\"\"));\n+        assertTrue(\"Incorrect integrity attribute for script tag\", s.contains(\"integrity=\\\"test\\\"\"));\n+        assertTrue(\"Incorrect nonce attribute for script tag\", s.contains(\"nonce=\\\"\" + NONCE_VAL+\"\\\"\"));\n+    }\n+\n+    private void doScriptTest(ScriptTag tag) {\n+        //creating nonce value like the CspInterceptor does\n+        stack.getActionContext().getSession().put(\"nonce\", NONCE_VAL);\n+        tag.setPageContext(pageContext);\n+\n+        try {\n+            tag.doStartTag();\n+            tag.doEndTag();\n+        } catch (JspException e) {\n+            e.printStackTrace();\n+            fail();\n+        }\n+\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "4146592d50601964187a3bbdee2e5f97677aad1c",
                            "filename": "plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/LinkHandler.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fjavatemplates%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FLinkHandler.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/plugins%2Fjavatemplates%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FLinkHandler.java",
                            "diff_file": "diff --git a/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/LinkHandler.java b/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/LinkHandler.java\nnew file mode 100644\nindex 000000000..4146592d5\n--- /dev/null\n+++ b/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/LinkHandler.java\n@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.views.java.simple;\n+\n+import org.apache.struts2.views.java.Attributes;\n+import org.apache.struts2.views.java.TagGenerator;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class LinkHandler extends AbstractTagHandler implements TagGenerator {\n+\n+    @Override\n+    public void generate() throws IOException {\n+        Map<String, Object> params = context.getParameters();\n+        Attributes attrs = new Attributes();\n+\n+        attrs.add(\"nonce\", (String) params.get(\"nonce\"))\n+                .addIfExists(\"href\", params.get((\"href\")))\n+                .addIfExists(\"hreflang\", params.get(\"hreflang\"))\n+                .addIfExists(\"rel\", params.get(\"rel\"))\n+                .addIfExists(\"media\", params.get(\"media\"))\n+                .addIfExists(\"sizes\", params.get(\"sizes\"))\n+                .addIfExists(\"crossorigin\", params.get(\"crossorigin\"))\n+                .addIfExists(\"referrerpolicy\", params.get(\"referrerpolicy\"))\n+                .addIfExists(\"type\", params.get(\"type\"))\n+                .addIfExists(\"as\", params.get(\"as\"))\n+                .addIfExists(\"disabled\", params.get(\"disabled\"))\n+                .addIfExists(\"title\", params.get(\"title\"));\n+\n+        start(\"link\", attrs);\n+        end(\"link\");\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "ec62941d1c409c4295eb8c2907c5214dcf84f859",
                            "filename": "plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/ScriptHandler.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fjavatemplates%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FScriptHandler.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/plugins%2Fjavatemplates%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FScriptHandler.java",
                            "diff_file": "diff --git a/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/ScriptHandler.java b/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/ScriptHandler.java\nnew file mode 100644\nindex 000000000..ec62941d1\n--- /dev/null\n+++ b/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/ScriptHandler.java\n@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.struts2.views.java.simple;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.struts2.views.java.Attributes;\n+import org.apache.struts2.views.java.TagGenerator;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class ScriptHandler extends AbstractTagHandler implements TagGenerator {\n+\n+    @Override\n+    public void generate() throws IOException {\n+        Map<String, Object> params = context.getParameters();\n+        Attributes attrs = new Attributes();\n+\n+        attrs.add(\"nonce\", (String) params.get(\"nonce\"))\n+            .addIfExists(\"async\", params.get(\"async\"))\n+            .addIfExists(\"charset\", params.get(\"charset\"))\n+            .addIfExists(\"defer\", params.get(\"defer\"))\n+            .addIfExists(\"src\", params.get(\"src\"))\n+            .addIfExists(\"type\", params.get(\"type\"))\n+            .addIfExists(\"name\", params.get(\"name\"))\n+            .addIfExists(\"referrerpolicy\", params.get(\"referrerpolicy\"))\n+            .addIfExists(\"nomodule\", params.get(\"nomodule\"))\n+            .addIfExists(\"integrity\", params.get(\"integrity\"))\n+            .addIfExists(\"crossorigin\", params.get(\"crossorigin\"));\n+\n+        start(\"script\", attrs);\n+    }\n+\n+    public static class CloseHandler extends AbstractTagHandler implements TagGenerator {\n+\n+        public void generate() throws IOException {\n+            Map<String, Object> params = context.getParameters();\n+            String body = (String) params.get(\"body\");\n+            if (StringUtils.isNotEmpty(body))\n+                characters(body, false); // false means no HTML encoding\n+            end(\"script\");\n+        }\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "0e8963094a1a3cac4e669b7ea70eecdeb4d0d75c",
                            "filename": "plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/SimpleTheme.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fjavatemplates%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FSimpleTheme.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/plugins%2Fjavatemplates%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FSimpleTheme.java",
                            "diff_file": "diff --git a/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/SimpleTheme.java b/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/SimpleTheme.java\nindex c3ebe8ba8..0e8963094 100644\n--- a/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/SimpleTheme.java\n+++ b/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/SimpleTheme.java\n@@ -50,6 +50,9 @@ public class SimpleTheme extends DefaultTheme {\n                 put(\"textarea\", new FactoryList(TextAreaHandler.class, ScriptingEventsHandler.class, CommonAttributesHandler.class, DynamicAttributesHandler.class));\n                 put(\"radiomap\", new FactoryList(RadioHandler.class, ScriptingEventsHandler.class, CommonAttributesHandler.class, DynamicAttributesHandler.class));\n                 put(\"checkboxlist\", new FactoryList(CheckboxListHandler.class, ScriptingEventsHandler.class, CommonAttributesHandler.class, DynamicAttributesHandler.class));\n+                put(\"script\", new FactoryList(ScriptHandler.class, CommonAttributesHandler.class, DynamicAttributesHandler.class));\n+                put(\"script-close\", new FactoryList(ScriptHandler.CloseHandler.class));\n+                put(\"link\", new FactoryList(LinkHandler.class, CommonAttributesHandler.class, DynamicAttributesHandler.class));\n                 put(\"actionerror\", new FactoryList(ActionErrorHandler.class));\n                 put(\"token\", new FactoryList(TokenHandler.class));\n                 put(\"actionmessage\", new FactoryList(ActionMessageHandler.class));\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "8e7b039359b1223b4bb6aedef3d72ac490dfabf5",
                            "filename": "plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/LinkTest.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fjavatemplates%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FLinkTest.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/plugins%2Fjavatemplates%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FLinkTest.java",
                            "diff_file": "diff --git a/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/LinkTest.java b/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/LinkTest.java\nnew file mode 100644\nindex 000000000..8e7b03935\n--- /dev/null\n+++ b/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/LinkTest.java\n@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.views.java.simple;\n+\n+import com.opensymphony.xwork2.ActionContext;\n+import org.apache.struts2.components.Link;\n+import org.apache.struts2.components.UIBean;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class LinkTest extends AbstractTest{\n+\n+    private Link tag;\n+\n+    private static final String NONCE_VAL = \"r4andom\";\n+\n+    public void testRenderScriptTag() {\n+        tag.setHref(\"testhref\");\n+        tag.setHreflang(\"test\");\n+        tag.setRel(\"module\");\n+        tag.setMedia(\"foo\");\n+        tag.setReferrerpolicy(\"test\");\n+        tag.setSizes(\"foo\");\n+        tag.setCrossorigin(\"same-origin\");\n+        tag.setType(\"anonymous\");\n+        tag.setAs(\"test\");\n+        tag.setDisabled(\"disabled_\");\n+        tag.setTitle(\"test\");\n+\n+        tag.evaluateParams();\n+        map.putAll(tag.getParameters());\n+        theme.renderTag(getTagName(), context);\n+        String s = writer.getBuffer().toString();\n+\n+        assertTrue(\"Incorrect href attribute for link tag\", s.contains(\"href=\\\"testhref\\\"\"));\n+        assertTrue(\"Incorrect hreflang attribute for link tag\", s.contains(\"hreflang=\\\"test\\\"\"));\n+        assertTrue(\"Incorrect rel attribute for link tag\", s.contains(\"rel=\\\"module\\\"\"));\n+        assertTrue(\"Incorrect media attribute for link tag\", s.contains(\"media=\\\"foo\\\"\"));\n+        assertTrue(\"Incorrect referrerpolicy attribute for link tag\", s.contains(\"referrerpolicy=\\\"test\\\"\"));\n+        assertTrue(\"Incorrect sizes attribute for link tag\", s.contains(\"sizes=\\\"foo\\\"\"));\n+        assertTrue(\"Incorrect crossorigin attribute for link tag\", s.contains(\"crossorigin=\\\"same-origin\\\"\"));\n+        assertTrue(\"Incorrect type attribute for link tag\", s.contains(\"type=\\\"anonymous\\\"\"));\n+        assertTrue(\"Incorrect as attribute for link tag\", s.contains(\"as=\\\"test\\\"\"));\n+        assertTrue(\"Non-existent disabled attribute for link tag\", s.contains(\"disabled=\\\"disabled_\\\"\"));\n+        assertTrue(\"Incorrect title attribute for link tag\", s.contains(\"title=\\\"test\\\"\"));\n+        assertTrue(\"Incorrect nonce attribute for link tag\", s.contains(\"nonce=\\\"\" + NONCE_VAL+\"\\\"\"));\n+    }\n+    @Override\n+    protected UIBean getUIBean() throws Exception {\n+        return tag;\n+    }\n+\n+    @Override\n+    protected String getTagName() {\n+        return \"link\";\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+\n+        ActionContext actionContext = stack.getActionContext();\n+        Map<String, Object> session = new HashMap<>();\n+        session.put(\"nonce\", NONCE_VAL);\n+        actionContext.withSession(session);\n+\n+        this.tag = new Link(stack, request, response);\n+    }\n+}\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "3536c5e134dde5bb542e3df9b99be78171f1c258",
                            "filename": "plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/ScriptTest.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fjavatemplates%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FScriptTest.java?ref=4d8bec5d0a56dd8fefaf3783ed57ae65139525cc",
                            "raw_url": "https://github.com/apache/struts/raw/4d8bec5d0a56dd8fefaf3783ed57ae65139525cc/plugins%2Fjavatemplates%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fviews%2Fjava%2Fsimple%2FScriptTest.java",
                            "diff_file": "diff --git a/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/ScriptTest.java b/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/ScriptTest.java\nnew file mode 100644\nindex 000000000..3536c5e13\n--- /dev/null\n+++ b/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/ScriptTest.java\n@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.views.java.simple;\n+\n+import com.opensymphony.xwork2.ActionContext;\n+import org.apache.struts2.components.Script;\n+import org.apache.struts2.components.UIBean;\n+\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class ScriptTest extends AbstractTest {\n+\n+    private Script tag;\n+\n+    private static final String NONCE_VAL = \"r4andom\";\n+\n+    public void testRenderScriptTag() {\n+        tag.setName(\"name_\");\n+        tag.setType(\"text/javascript\");\n+        tag.setSrc(\"mysrc\");\n+        tag.setAsync(\"false\");\n+        tag.setDefer(\"false\");\n+        tag.setCharset(\"test\");\n+        tag.setReferrerpolicy(\"foo\");\n+        tag.setNomodule(\"bar\");\n+        tag.setIntegrity(\"test\");\n+        tag.setCrossorigin(\"test\");\n+\n+        tag.evaluateParams();\n+        map.putAll(tag.getParameters());\n+        theme.renderTag(getTagName(), context);\n+        String output = writer.getBuffer().toString();\n+\n+        assertTrue(\"Script doesn't have nonce attribute\", output.contains(\"nonce=\"));\n+        assertTrue(\"Script doesn't have type attribute\", output.contains(\"type=\"));\n+        assertTrue(\"Script doesn't have src attribute\", output.contains(\"src=\"));\n+        assertTrue(\"Script doesn't have async attribute\", output.contains(\"async\"));\n+        assertTrue(\"Script doesn't have defer attribute\", output.contains(\"defer\"));\n+        assertTrue(\"Script doesn't have charset attribute\", output.contains(\"charset=\"));\n+        assertTrue(\"Script doesn't have referrerpolicy attribute\", output.contains(\"referrerpolicy=\"));\n+        assertTrue(\"Script doesn't have nomodule attribute\", output.contains(\"nomodule\"));\n+        assertTrue(\"Script doesn't have integrity attribute\", output.contains(\"integrity=\"));\n+        assertTrue(\"Script doesn't have crossorigin attribute\", output.contains(\"crossorigin=\"));\n+    }\n+\n+    @Override\n+    protected UIBean getUIBean() throws Exception {\n+        return tag;\n+    }\n+\n+    @Override\n+    protected String getTagName() {\n+        return \"script\";\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+\n+        ActionContext actionContext = stack.getActionContext();\n+        Map<String, Object> session = new HashMap<>();\n+        session.put(\"nonce\", NONCE_VAL);\n+        actionContext.withSession(session);\n+\n+        this.tag = new Script(stack, request, response);\n+    }\n+}\n",
                            "security_relevancy": ""
                        }
                    ],
                    "pullrequest": 430,
                    "path": "commits\\apache\\struts\\430\\4d8bec5d0a56dd8fefaf3783ed57ae65139525cc"
                },
                {
                    "sha": "418ca2c077676d37701075cf3690a3a64bfae785",
                    "message": "Use default execute method on CspReportAction",
                    "files": [
                        {
                            "sha": "187e7ee61f7735ea5e448ea6eaaf70c6e55e430e",
                            "filename": "core/src/main/java/org/apache/struts2/action/CspReportAction.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCspReportAction.java?ref=418ca2c077676d37701075cf3690a3a64bfae785",
                            "raw_url": "https://github.com/apache/struts/raw/418ca2c077676d37701075cf3690a3a64bfae785/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCspReportAction.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/CspReportAction.java b/core/src/main/java/org/apache/struts2/action/CspReportAction.java\nindex e6f4a05f3..187e7ee61 100644\n--- a/core/src/main/java/org/apache/struts2/action/CspReportAction.java\n+++ b/core/src/main/java/org/apache/struts2/action/CspReportAction.java\n@@ -53,10 +53,6 @@ import static org.apache.struts2.interceptor.csp.CspSettings.CSP_REPORT_TYPE;\n public abstract class CspReportAction extends ActionSupport implements ServletRequestAware, ServletResponseAware {\n     private HttpServletRequest request;\n \n-    public String execute() throws IOException {\n-        return \"success\";\n-    }\n-\n     @Override\n     public void withServletRequest(HttpServletRequest request) {\n         if (!isCspReportRequest(request)) {\n",
                            "security_relevancy": ""
                        }
                    ],
                    "pullrequest": 430,
                    "path": "commits\\apache\\struts\\430\\418ca2c077676d37701075cf3690a3a64bfae785"
                },
                {
                    "sha": "0af4d6ff85aaf926a18c621ac3b3f48954dc5ed0",
                    "message": "Remove report URI from default CSP interceptor configuration. By default, CSP will be in reporting mode with no report directive.",
                    "files": [
                        {
                            "sha": "2501796366ec577a65724d17df6d4cab99648322",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2Fcsp%2FCspInterceptor.java?ref=0af4d6ff85aaf926a18c621ac3b3f48954dc5ed0",
                            "raw_url": "https://github.com/apache/struts/raw/0af4d6ff85aaf926a18c621ac3b3f48954dc5ed0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2Fcsp%2FCspInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java\nindex f70b0c63f..250179636 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/csp/CspInterceptor.java\n@@ -62,7 +62,7 @@ public final class CspInterceptor extends AbstractInterceptor implements PreResu\n         settings.setReportUri(reportUri);\n     }\n \n-    private static Optional<URI> buildUri(String reportUri) {\n+    private Optional<URI> buildUri(String reportUri) {\n         try {\n             return Optional.of(URI.create(reportUri));\n         } catch (IllegalArgumentException ignored) {\n",
                            "security_relevancy": ""
                        }
                    ],
                    "pullrequest": 430,
                    "path": "commits\\apache\\struts\\430\\0af4d6ff85aaf926a18c621ac3b3f48954dc5ed0"
                },
                {
                    "sha": "2ce753a1b391579300f2f5385ffc784698e3e02a",
                    "message": "Add unit test for CSP report action. Ensure only reports with correct method, content length and content type are processed and response code is always 204.",
                    "files": [
                        {
                            "sha": "eadca87c8a12d6e051844c94255b0166bb33c2ed",
                            "filename": "core/src/test/java/org/apache/struts2/action/CspReportActionTest.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCspReportActionTest.java?ref=2ce753a1b391579300f2f5385ffc784698e3e02a",
                            "raw_url": "https://github.com/apache/struts/raw/2ce753a1b391579300f2f5385ffc784698e3e02a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCspReportActionTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/action/CspReportActionTest.java b/core/src/test/java/org/apache/struts2/action/CspReportActionTest.java\nnew file mode 100644\nindex 000000000..eadca87c8\n--- /dev/null\n+++ b/core/src/test/java/org/apache/struts2/action/CspReportActionTest.java\n@@ -0,0 +1,112 @@\n+package org.apache.struts2.action;\n+\n+import com.opensymphony.xwork2.XWorkTestCase;\n+import org.apache.struts2.interceptor.csp.CspSettings;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class CspReportActionTest extends XWorkTestCase {\n+  public void testWhenMethodNotPost_thenReportNotProcessed() {\n+    for (HttpMethod method : HttpMethod.values()) {\n+      TestCspReportAction cspReportAction = new TestCspReportAction();\n+\n+      // only expect a report if the method is post\n+      int expectedReports = method == HttpMethod.POST ? 1 : 0;\n+\n+      MockHttpServletRequest request = new MockHttpServletRequest(method.toString(), \"/requestUri\");\n+      request.setContent(\"someSampleContent\".getBytes());\n+      request.setContentType(CspSettings.CSP_REPORT_TYPE);\n+\n+      cspReportAction.withServletRequest(request);\n+\n+      assertEquals(\n+          \"Unexpected behaviour with method \" + method,\n+          expectedReports,\n+          cspReportAction.actualNumberOfReports\n+      );\n+\n+      assertCorrectResponseStatusCode(cspReportAction);\n+    }\n+  }\n+\n+  public void testWhenNoContentLength_thenReportNotProcessed() {\n+    TestCspReportAction cspReportAction = new TestCspReportAction();\n+    MockHttpServletRequest request = new MockHttpServletRequest(\"POST\", \"/requestUri\");\n+    request.setContentType(CspSettings.CSP_REPORT_TYPE);\n+\n+    cspReportAction.withServletRequest(request);\n+\n+    assertEquals(\n+        \"Report request with empty body should not be processed\",\n+        0,\n+        cspReportAction.actualNumberOfReports\n+    );\n+\n+    assertCorrectResponseStatusCode(cspReportAction);\n+  }\n+\n+  public void testWhenContentTypeNotCsp_thenReportNotProcessed() {\n+    TestCspReportAction cspReportAction = new TestCspReportAction();\n+    MockHttpServletRequest request = new MockHttpServletRequest(\"POST\", \"/requestUri\");\n+    request.setContent(\"someSampleContent\".getBytes());\n+    request.setContentType(\"application/json\");\n+\n+    cspReportAction.withServletRequest(request);\n+\n+    assertEquals(\n+        \"Report request with wrong content type should not be processed\",\n+        0,\n+        cspReportAction.actualNumberOfReports\n+    );\n+\n+    assertCorrectResponseStatusCode(cspReportAction);\n+  }\n+\n+  public void testWhenValidReportRequest_thenReportProcessed() {\n+    TestCspReportAction cspReportAction = new TestCspReportAction();\n+    String sampleReport = \"someSampleContent\";\n+\n+    MockHttpServletRequest request = new MockHttpServletRequest(\"POST\", \"/requestUri\");\n+    request.setContent(sampleReport.getBytes());\n+    request.setContentType(CspSettings.CSP_REPORT_TYPE);\n+\n+    cspReportAction.withServletRequest(request);\n+\n+    assertEquals(\n+        \"Valid report request was not processed\",\n+        1,\n+        cspReportAction.actualNumberOfReports\n+    );\n+\n+    assertEquals(\n+        \"Processed report body did not match\",\n+        sampleReport,\n+        cspReportAction.actualReport\n+    );\n+\n+    assertCorrectResponseStatusCode(cspReportAction);\n+  }\n+\n+  private void assertCorrectResponseStatusCode(TestCspReportAction cspReportAction) {\n+    MockHttpServletResponse response = new MockHttpServletResponse();\n+    cspReportAction.withServletResponse(response);\n+\n+    assertEquals(\n+        \"Unexpected response status code: \" + response.getStatus(),\n+        204,\n+        response.getStatus()\n+    );\n+  }\n+\n+  static class TestCspReportAction extends CspReportAction {\n+    int actualNumberOfReports;\n+    String actualReport;\n+\n+    @Override\n+    void processReport(String jsonCspReport) {\n+      actualNumberOfReports++;\n+      actualReport = jsonCspReport;\n+    }\n+  }\n+}\n",
                            "security_relevancy": ""
                        }
                    ],
                    "pullrequest": 430,
                    "path": "commits\\apache\\struts\\430\\2ce753a1b391579300f2f5385ffc784698e3e02a"
                },
                {
                    "sha": "bf802542c668b4a33ea4d3a9c12b8625c37fe4db",
                    "message": "Add missing license to test file.",
                    "files": [
                        {
                            "sha": "27a5b93429ac545738d094ceaa442882f089a2c7",
                            "filename": "core/src/test/java/org/apache/struts2/action/CspReportActionTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCspReportActionTest.java?ref=bf802542c668b4a33ea4d3a9c12b8625c37fe4db",
                            "raw_url": "https://github.com/apache/struts/raw/bf802542c668b4a33ea4d3a9c12b8625c37fe4db/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCspReportActionTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/action/CspReportActionTest.java b/core/src/test/java/org/apache/struts2/action/CspReportActionTest.java\nindex eadca87c8..27a5b9342 100644\n--- a/core/src/test/java/org/apache/struts2/action/CspReportActionTest.java\n+++ b/core/src/test/java/org/apache/struts2/action/CspReportActionTest.java\n@@ -1,3 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.apache.struts2.action;\n \n import com.opensymphony.xwork2.XWorkTestCase;\n",
                            "security_relevancy": ""
                        }
                    ],
                    "pullrequest": 430,
                    "path": "commits\\apache\\struts\\430\\bf802542c668b4a33ea4d3a9c12b8625c37fe4db"
                }
            ]
        },
        {
            "url": "https://api.github.com/repos/apache/struts/pulls/252",
            "number": 252,
            "title": "WW-4963 Implement new Aware interfaces",
            "issue_key": [
                "WW-4963"
            ],
            "issue": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185983",
                    "id": "13185983",
                    "key": "WW-4963",
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                        "name": "Improvement"
                    },
                    "labels": [],
                    "description": "In matter of security I wonder if we should stop using setters in internal API. Like in {{SessionAware}} interface we use {{setSession()}} and each actions must implement this method. Then we have a logic to avoid mapping incoming values to {{setSession()}} to permit injecting values into Session.\r\n\r\nInstead of {{setSession()}} we can use {{withSession()}} or {{applySession()}} - the same can be applied to any *Aware interface.",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "name": "Closed"
                    },
                    "created": "2018-09-19T07:07:29.000+0000",
                    "updated": "2022-06-14T09:47:17.000+0000",
                    "resolved": null,
                    "prlinks": [
                        "https://github.com/apache/struts/pull/252"
                    ],
                    "commitlinks": [],
                    "commits": null
                }
            ],
            "commits": [
                {
                    "sha": "d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad",
                    "message": "WW-4963 Implements new SessionAware interface\nthat uses withSession instead of setSession",
                    "files": [
                        {
                            "sha": "039fcca00f82d89680a4ecac649cfbc94b7a5ad2",
                            "filename": "core/src/main/java/org/apache/struts2/action/SessionAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FSessionAware.java?ref=d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad",
                            "raw_url": "https://github.com/apache/struts/raw/d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FSessionAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/SessionAware.java b/core/src/main/java/org/apache/struts2/action/SessionAware.java\nnew file mode 100644\nindex 000000000..039fcca00\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/SessionAware.java\n@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import java.util.Map;\n+\n+/**\n+ * Actions that want access to the user's HTTP session attributes should implement this interface.\n+ *\n+ * This will give them access to a Map where they can put objects that can be made available\n+ * to subsequent requests.\n+ *\n+ * Typical uses may be cached user data such as name, or a shopping cart.\n+ */\n+public interface SessionAware {\n+\n+    /**\n+     * Applies the Map of session attributes in the implementing class.\n+     *\n+     * @param session a Map of HTTP session attribute name/value pairs.\n+     */\n+    void withSession(Map<String, Object> session);\n+\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "bd017d07be3254a67729530cd55e4e9b86c7c1ff",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java?ref=d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad",
                            "raw_url": "https://github.com/apache/struts/raw/d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\nindex 813a87d91..bd017d07b 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n@@ -149,6 +149,10 @@ public class ServletConfigInterceptor extends AbstractInterceptor implements Str\n             ((SessionAware) action).setSession(context.getSession());\n         }\n         \n+        if (action instanceof org.apache.struts2.action.SessionAware) {\n+            ((org.apache.struts2.action.SessionAware) action).withSession(context.getSession());\n+        }\n+\n         if (action instanceof RequestAware) {\n             ((RequestAware) action).setRequest((Map) context.get(\"request\"));\n         }\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "0380c97022c54555aed8a2675c3d58b6917805b9",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/SessionAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FSessionAware.java?ref=d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad",
                            "raw_url": "https://github.com/apache/struts/raw/d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FSessionAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/SessionAware.java b/core/src/main/java/org/apache/struts2/interceptor/SessionAware.java\nindex db553889e..0380c9702 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/SessionAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/SessionAware.java\n@@ -31,13 +31,17 @@ import java.util.Map;\n  * <p>\n  * Typical uses may be cached user data such as name, or a shopping cart.\n  * </p>\n+ * @deprecated use {@link org.apache.struts2.action.SessionAware}\n  */\n+@Deprecated\n public interface SessionAware {\n \n     /**\n      * Sets the Map of session attributes in the implementing class.\n      *\n      * @param session a Map of HTTP session attribute name/value pairs.\n+     * @deprecated please use {@link org.apache.struts2.action.SessionAware#withSession(Map)}\n      */\n+    @Deprecated\n     public void setSession(Map<String,Object> session);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "34353c87f1139fac04220d9fe231b46b8e34435e",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java?ref=d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad",
                            "raw_url": "https://github.com/apache/struts/raw/d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\nindex c394d2b90..34353c87f 100644\n--- a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n+++ b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n@@ -128,6 +128,22 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n         verify(mock);\n     }\n \n+    public void testActionSessionAware() throws Exception {\n+        org.apache.struts2.action.SessionAware mock = createMock(org.apache.struts2.action.SessionAware.class);\n+\n+        MockActionInvocation mai = createActionInvocation(mock);\n+\n+        Map<String, Object> session = new HashMap<String, Object>();\n+        mai.getInvocationContext().setSession(session);\n+\n+        mock.withSession(session);\n+        expectLastCall().times(1);\n+\n+        replay(mock);\n+        interceptor.intercept(mai);\n+        verify(mock);\n+    }\n+\n     public void testApplicationAware() throws Exception {\n         ApplicationAware mock = (ApplicationAware) createMock(ApplicationAware.class);\n \n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\d38efae5f09776e45dd0e0faaa8bf1cf2ab04dad"
                },
                {
                    "sha": "3820eae31f9db2016ac8d9576ed2346cda41fc9b",
                    "message": "WW-4963 Implements new ServletRequestAware interface\nthat uses withRequest instead of setRequest",
                    "files": [
                        {
                            "sha": "115bff35e29cc565dc5f6f7800ca6c6255015fe4",
                            "filename": "core/src/main/java/org/apache/struts2/action/ServletRequestAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FServletRequestAware.java?ref=3820eae31f9db2016ac8d9576ed2346cda41fc9b",
                            "raw_url": "https://github.com/apache/struts/raw/3820eae31f9db2016ac8d9576ed2346cda41fc9b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FServletRequestAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/ServletRequestAware.java b/core/src/main/java/org/apache/struts2/action/ServletRequestAware.java\nnew file mode 100644\nindex 000000000..115bff35e\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/ServletRequestAware.java\n@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * All Actions that want to have access to the servlet request object must implement this interface.\n+ *\n+ * This interface is only relevant if the Action is used in a servlet environment.\n+ *\n+ * Note that using this interface makes the Action tied to a servlet environment, so it should be\n+ * avoided if possible since things like unit testing will become more difficult.\n+ */\n+public interface ServletRequestAware {\n+\n+    /**\n+     * Applies the HTTP request object in implementing classes.\n+     *\n+     * @param request the HTTP request.\n+     */\n+    void withServletRequest(HttpServletRequest request);\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "e5b9aa43223b01e7c053e3f637aaa1b761316590",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java?ref=3820eae31f9db2016ac8d9576ed2346cda41fc9b",
                            "raw_url": "https://github.com/apache/struts/raw/3820eae31f9db2016ac8d9576ed2346cda41fc9b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\nindex bd017d07b..e5b9aa432 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n@@ -128,6 +128,11 @@ public class ServletConfigInterceptor extends AbstractInterceptor implements Str\n             ((ServletRequestAware) action).setServletRequest(request);\n         }\n \n+        if (action instanceof org.apache.struts2.action.ServletRequestAware) {\n+            HttpServletRequest request = (HttpServletRequest) context.get(HTTP_REQUEST);\n+            ((org.apache.struts2.action.ServletRequestAware) action).withServletRequest(request);\n+        }\n+\n         if (action instanceof ServletResponseAware) {\n             HttpServletResponse response = (HttpServletResponse) context.get(HTTP_RESPONSE);\n             ((ServletResponseAware) action).setServletResponse(response);\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "7c9da30323285e5a8c720e52e9bc227f6c83d6d4",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletRequestAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletRequestAware.java?ref=3820eae31f9db2016ac8d9576ed2346cda41fc9b",
                            "raw_url": "https://github.com/apache/struts/raw/3820eae31f9db2016ac8d9576ed2346cda41fc9b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletRequestAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletRequestAware.java b/core/src/main/java/org/apache/struts2/interceptor/ServletRequestAware.java\nindex 20a6039dd..7c9da3032 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletRequestAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletRequestAware.java\n@@ -33,13 +33,17 @@ import javax.servlet.http.HttpServletRequest;\n  * Note that using this interface makes the Action tied to a servlet environment, so it should be\n  * avoided if possible since things like unit testing will become more difficult.\n  * </p>\n+ * @deprecated please use {@link org.apache.struts2.action.ServletRequestAware} instead\n  */\n+@Deprecated\n public interface ServletRequestAware {\n \n     /**\n      * Sets the HTTP request object in implementing classes.\n      *\n      * @param request the HTTP request.\n+     * @deprecated please use {@link org.apache.struts2.action.ServletRequestAware#withServletRequest(HttpServletRequest)}\n      */\n+    @Deprecated\n     public void setServletRequest(HttpServletRequest request);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "dfecbfe15aa693e18ba9493f8d7e2948edae238a",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java?ref=3820eae31f9db2016ac8d9576ed2346cda41fc9b",
                            "raw_url": "https://github.com/apache/struts/raw/3820eae31f9db2016ac8d9576ed2346cda41fc9b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\nindex 34353c87f..dfecbfe15 100644\n--- a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n+++ b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n@@ -64,6 +64,22 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n         verify(mock);\n     }\n \n+    public void testActionServletRequestAware() throws Exception {\n+        org.apache.struts2.action.ServletRequestAware mock = createMock(org.apache.struts2.action.ServletRequestAware.class);\n+\n+        MockHttpServletRequest req = new MockHttpServletRequest();\n+\n+        MockActionInvocation mai = createActionInvocation(mock);\n+        mai.getInvocationContext().put(StrutsStatics.HTTP_REQUEST, req);\n+\n+        mock.withServletRequest(req);\n+        expectLastCall();\n+\n+        replay(mock);\n+        interceptor.intercept(mai);\n+        verify(mock);\n+    }\n+\n     public void testServletResponseAware() throws Exception {\n         ServletResponseAware mock = (ServletResponseAware) createMock(ServletResponseAware.class);\n \n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\3820eae31f9db2016ac8d9576ed2346cda41fc9b"
                },
                {
                    "sha": "e0fb8031ce99dcb893dbc0b223845235eca7721a",
                    "message": "WW-4963 Implements new ServletResponseAware interface\nthat uses withResponseServlet instead of setResponseServlet",
                    "files": [
                        {
                            "sha": "0403f1f9c72df10e238a8992e9345f736a8da29d",
                            "filename": "core/src/main/java/org/apache/struts2/action/ServletResponseAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FServletResponseAware.java?ref=e0fb8031ce99dcb893dbc0b223845235eca7721a",
                            "raw_url": "https://github.com/apache/struts/raw/e0fb8031ce99dcb893dbc0b223845235eca7721a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FServletResponseAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/ServletResponseAware.java b/core/src/main/java/org/apache/struts2/action/ServletResponseAware.java\nnew file mode 100644\nindex 000000000..0403f1f9c\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/ServletResponseAware.java\n@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * All Actions that want to have access to the servlet response object must implement this interface.\n+ *\n+ * This interface is only relevant if the Action is used in a servlet environment.\n+ *\n+ * Note that using this interface makes the Action tied to a servlet environment, so it should be\n+ * avoided if possible since things like unit testing will become more difficult.\n+ */\n+public interface ServletResponseAware {\n+\n+    /**\n+     * Applies the HTTP response object in implementing classes.\n+     *\n+     * @param response the HTTP response.\n+     */\n+    void withServletResponse(HttpServletResponse response);\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "e6b8a11ccada6b726d89048724d8ab89368c7b49",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java?ref=e0fb8031ce99dcb893dbc0b223845235eca7721a",
                            "raw_url": "https://github.com/apache/struts/raw/e0fb8031ce99dcb893dbc0b223845235eca7721a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\nindex e5b9aa432..e6b8a11cc 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n@@ -138,6 +138,11 @@ public class ServletConfigInterceptor extends AbstractInterceptor implements Str\n             ((ServletResponseAware) action).setServletResponse(response);\n         }\n \n+        if (action instanceof org.apache.struts2.action.ServletResponseAware) {\n+            HttpServletResponse response = (HttpServletResponse) context.get(HTTP_RESPONSE);\n+            ((org.apache.struts2.action.ServletResponseAware) action).withServletResponse(response);\n+        }\n+\n         if (action instanceof ParameterAware) {\n             context.getParameters().applyParameters((ParameterAware) action);\n         }\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "9043b443482afa0483db958ab18590fd97db5f43",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletResponseAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletResponseAware.java?ref=e0fb8031ce99dcb893dbc0b223845235eca7721a",
                            "raw_url": "https://github.com/apache/struts/raw/e0fb8031ce99dcb893dbc0b223845235eca7721a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletResponseAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletResponseAware.java b/core/src/main/java/org/apache/struts2/interceptor/ServletResponseAware.java\nindex e70c1af72..9043b4434 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletResponseAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletResponseAware.java\n@@ -31,13 +31,17 @@ import javax.servlet.http.HttpServletResponse;\n  * Note that using this interface makes the Action tied to a servlet environment, so it should be\n  * avoided if possible since things like unit testing will become more difficult.\n  * </p>\n+ * @deprecated please use {@link org.apache.struts2.action.ServletResponseAware} instead\n  */\n+@Deprecated\n public interface ServletResponseAware {\n \n     /**\n      * Sets the HTTP response object in implementing classes.\n      *\n      * @param response the HTTP response.\n+     * @deprecated please use {@link org.apache.struts2.action.ServletResponseAware#withServletResponse(HttpServletResponse)} instead\n      */\n+    @Deprecated\n     public void setServletResponse(HttpServletResponse response);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "4fc43ebd3a7901d0a70e6a9d16d927b39f259edd",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java?ref=e0fb8031ce99dcb893dbc0b223845235eca7721a",
                            "raw_url": "https://github.com/apache/struts/raw/e0fb8031ce99dcb893dbc0b223845235eca7721a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\nindex dfecbfe15..4fc43ebd3 100644\n--- a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n+++ b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n@@ -96,6 +96,22 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n         verify(mock);\n     }\n \n+    public void testActionServletResponseAware() throws Exception {\n+        org.apache.struts2.action.ServletResponseAware mock = createMock(org.apache.struts2.action.ServletResponseAware.class);\n+\n+        MockHttpServletResponse res = new MockHttpServletResponse();\n+\n+        MockActionInvocation mai = createActionInvocation(mock);\n+        mai.getInvocationContext().put(StrutsStatics.HTTP_RESPONSE, res);\n+\n+        mock.withServletResponse(res);\n+        expectLastCall().times(1);\n+\n+        replay(mock);\n+        interceptor.intercept(mai);\n+        verify(mock);\n+    }\n+\n     public void testParameterAware() throws Exception {\n         ParameterAware mock = createMock(ParameterAware.class);\n \n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\e0fb8031ce99dcb893dbc0b223845235eca7721a"
                },
                {
                    "sha": "dc7138ee2ea42194ee51cc886b1598021d536f0f",
                    "message": "WW-4963 Implements new ApplicationAware interface\nthat uses withApplication instead of setApplication",
                    "files": [
                        {
                            "sha": "3748e60f22edd31557f7398ab31b38eb274cbd87",
                            "filename": "core/src/main/java/org/apache/struts2/action/ApplicationAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FApplicationAware.java?ref=dc7138ee2ea42194ee51cc886b1598021d536f0f",
                            "raw_url": "https://github.com/apache/struts/raw/dc7138ee2ea42194ee51cc886b1598021d536f0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FApplicationAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/ApplicationAware.java b/core/src/main/java/org/apache/struts2/action/ApplicationAware.java\nnew file mode 100644\nindex 000000000..3748e60f2\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/ApplicationAware.java\n@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import java.util.Map;\n+\n+/**\n+ * Actions that want to be aware of the application Map object should implement this interface.\n+ * This will give them access to a Map where they can put objects that should be available\n+ * to other parts of the application.\n+ *\n+ * Typical uses are configuration objects and caches.\n+ */\n+public interface ApplicationAware {\n+\n+    /**\n+     * Applies the map of application properties in the implementing class.\n+     *\n+     * @param application a Map of application properties.\n+     */\n+    void withApplication(Map<String, Object> application);\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "c240fa8cb8350a3427b061b1fe9ba2c22ecbc0c8",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ApplicationAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FApplicationAware.java?ref=dc7138ee2ea42194ee51cc886b1598021d536f0f",
                            "raw_url": "https://github.com/apache/struts/raw/dc7138ee2ea42194ee51cc886b1598021d536f0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FApplicationAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ApplicationAware.java b/core/src/main/java/org/apache/struts2/interceptor/ApplicationAware.java\nindex 4cdd4785e..c240fa8cb 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ApplicationAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ApplicationAware.java\n@@ -29,13 +29,17 @@ import java.util.Map;\n  * <p>\n  * Typical uses are configuration objects and caches.\n  * </p>\n+ * @deprecated please use {@link org.apache.struts2.action.ApplicationAware} instead\n  */\n+@Deprecated\n public interface ApplicationAware {\n \n     /**\n      * Sets the map of application properties in the implementing class.\n      *\n      * @param application a Map of application properties.\n+     * @deprecated please use {@link org.apache.struts2.action.ApplicationAware#withApplication(Map)} instead\n      */\n+    @Deprecated\n     public void setApplication(Map<String,Object> application);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "24a3d81b62430281e73e213271df42aceeb0ec78",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java?ref=dc7138ee2ea42194ee51cc886b1598021d536f0f",
                            "raw_url": "https://github.com/apache/struts/raw/dc7138ee2ea42194ee51cc886b1598021d536f0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\nindex e6b8a11cc..24a3d81b6 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n@@ -155,6 +155,10 @@ public class ServletConfigInterceptor extends AbstractInterceptor implements Str\n             ((ApplicationAware) action).setApplication(context.getApplication());\n         }\n         \n+        if (action instanceof org.apache.struts2.action.ApplicationAware) {\n+            ((org.apache.struts2.action.ApplicationAware) action).withApplication(context.getApplication());\n+        }\n+\n         if (action instanceof SessionAware) {\n             ((SessionAware) action).setSession(context.getSession());\n         }\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "7187a1d95b71ea12936d3d1bf7d43d784fc0d279",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java?ref=dc7138ee2ea42194ee51cc886b1598021d536f0f",
                            "raw_url": "https://github.com/apache/struts/raw/dc7138ee2ea42194ee51cc886b1598021d536f0f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\nindex 4fc43ebd3..7187a1d95 100644\n--- a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n+++ b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n@@ -18,31 +18,32 @@\n  */\n package org.apache.struts2.interceptor;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.servlet.ServletContext;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n+import com.opensymphony.xwork2.Action;\n+import com.opensymphony.xwork2.ActionContext;\n+import com.opensymphony.xwork2.mock.MockActionInvocation;\n import org.apache.struts2.StrutsInternalTestCase;\n import org.apache.struts2.StrutsStatics;\n-import org.apache.struts2.interceptor.servlet.ServletPrincipalProxy;\n import org.apache.struts2.dispatcher.HttpParameters;\n+import org.apache.struts2.interceptor.servlet.ServletPrincipalProxy;\n import org.apache.struts2.util.ServletContextAware;\n-\n-import static org.easymock.EasyMock.*;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockHttpServletResponse;\n import org.springframework.mock.web.MockServletContext;\n \n-import com.opensymphony.xwork2.Action;\n-import com.opensymphony.xwork2.ActionContext;\n-import com.opensymphony.xwork2.mock.MockActionInvocation;\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.easymock.EasyMock.anyObject;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n \n /**\n  * Unit test for {@link ServletConfigInterceptor}.\n- *\n  */\n public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n \n@@ -192,6 +193,22 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n         verify(mock);\n     }\n \n+    public void testActionApplicationAware() throws Exception {\n+        org.apache.struts2.action.ApplicationAware mock = createMock(org.apache.struts2.action.ApplicationAware.class);\n+\n+        MockActionInvocation mai = createActionInvocation(mock);\n+\n+        Map<String, Object> app = new HashMap<>();\n+        mai.getInvocationContext().setApplication(app);\n+\n+        mock.withApplication(app);\n+        expectLastCall().times(1);\n+\n+        replay(mock);\n+        interceptor.intercept(mai);\n+        verify(mock);\n+    }\n+\n     public void testPrincipalAware() throws Exception {\n         MockHttpServletRequest req = new MockHttpServletRequest();\n         req.setUserPrincipal(null);\n@@ -200,7 +217,7 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n \n         MockActionInvocation mai = createActionInvocation(mock);\n         mai.getInvocationContext().put(StrutsStatics.HTTP_REQUEST, req);\n-        \n+\n         MockServletContext ctx = new MockServletContext();\n         mai.getInvocationContext().put(StrutsStatics.SERVLET_CONTEXT, ctx);\n \n@@ -228,8 +245,8 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n \n         PrincipalProxy proxy = action.getProxy();\n         assertNull(proxy.getUserPrincipal());\n-        assertTrue(! proxy.isRequestSecure());\n-        assertTrue(! proxy.isUserInRole(\"no.role\"));\n+        assertTrue(!proxy.isRequestSecure());\n+        assertTrue(!proxy.isUserInRole(\"no.role\"));\n         assertEquals(\"Santa\", proxy.getRemoteUser());\n \n     }\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\dc7138ee2ea42194ee51cc886b1598021d536f0f"
                },
                {
                    "sha": "384d418039998db6957b49cec806a7a0b2fd03a7",
                    "message": "WW-4963 Implements new PrincipalAware interface\nthat uses withPrincipalProxy instead of setPrincipalProxy",
                    "files": [
                        {
                            "sha": "9bff42bebb76f49b267e86091b129eff0740e2f3",
                            "filename": "core/src/main/java/org/apache/struts2/action/PrincipalAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FPrincipalAware.java?ref=384d418039998db6957b49cec806a7a0b2fd03a7",
                            "raw_url": "https://github.com/apache/struts/raw/384d418039998db6957b49cec806a7a0b2fd03a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FPrincipalAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/PrincipalAware.java b/core/src/main/java/org/apache/struts2/action/PrincipalAware.java\nnew file mode 100644\nindex 000000000..9bff42beb\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/PrincipalAware.java\n@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import org.apache.struts2.interceptor.PrincipalProxy;\n+\n+/**\n+ * Actions that want access to the Principal information from HttpServletRequest object\n+ * should implement this interface.\n+ *\n+ * This interface is only relevant if the Action is used in a servlet environment.\n+ * By using this interface you will not become tied to servlet environment.\n+ */\n+public interface PrincipalAware {\n+\n+    void withPrincipalProxy(PrincipalProxy principalProxy);\n+\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "ac1e3296b7c74cb61cb13faab086e00cbc4c6c1c",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/PrincipalAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FPrincipalAware.java?ref=384d418039998db6957b49cec806a7a0b2fd03a7",
                            "raw_url": "https://github.com/apache/struts/raw/384d418039998db6957b49cec806a7a0b2fd03a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FPrincipalAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/PrincipalAware.java b/core/src/main/java/org/apache/struts2/interceptor/PrincipalAware.java\nindex 7bf418ec9..ac1e3296b 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/PrincipalAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/PrincipalAware.java\n@@ -25,7 +25,14 @@ package org.apache.struts2.interceptor;\n  * <p>This interface is only relevant if the Action is used in a servlet environment.\n  * By using this interface you will not become tied to servlet environment.</p>\n  *\n+ * @deprecated please use {@link org.apache.struts2.action.PrincipalAware} instead\n  */\n+@Deprecated\n public interface PrincipalAware {\n+\n+    /**\n+     * @deprecated please use {@link org.apache.struts2.action.PrincipalAware#withPrincipalProxy(PrincipalProxy)} instead\n+     */\n+    @Deprecated\n     void setPrincipalProxy(PrincipalProxy principalProxy);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "302fcba660d3e71e72587a9adaddacf3b932a1f1",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java?ref=384d418039998db6957b49cec806a7a0b2fd03a7",
                            "raw_url": "https://github.com/apache/struts/raw/384d418039998db6957b49cec806a7a0b2fd03a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\nindex 24a3d81b6..302fcba66 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n@@ -178,6 +178,15 @@ public class ServletConfigInterceptor extends AbstractInterceptor implements Str\n                 ((PrincipalAware) action).setPrincipalProxy(new ServletPrincipalProxy(request));\n             }\n         }\n+\n+        if (action instanceof org.apache.struts2.action.PrincipalAware) {\n+            HttpServletRequest request = (HttpServletRequest) context.get(HTTP_REQUEST);\n+            if(request != null) {\n+                // We are in servlet environment, so principal information resides in HttpServletRequest\n+                ((org.apache.struts2.action.PrincipalAware) action).withPrincipalProxy(new ServletPrincipalProxy(request));\n+            }\n+        }\n+\n         if (action instanceof ServletContextAware) {\n             ServletContext servletContext = (ServletContext) context.get(SERVLET_CONTEXT);\n             ((ServletContextAware) action).setServletContext(servletContext);\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "4306aaa8bf2d29fa876a9521ef1e7edb7fb2ed00",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java?ref=384d418039998db6957b49cec806a7a0b2fd03a7",
                            "raw_url": "https://github.com/apache/struts/raw/384d418039998db6957b49cec806a7a0b2fd03a7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\nindex 7187a1d95..4306aaa8b 100644\n--- a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n+++ b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n@@ -229,6 +229,26 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n         verify(mock);\n     }\n \n+    public void testActionPrincipalAware() throws Exception {\n+        MockHttpServletRequest req = new MockHttpServletRequest();\n+        req.setUserPrincipal(null);\n+        req.setRemoteUser(\"Santa\");\n+        org.apache.struts2.action.PrincipalAware mock = createMock(org.apache.struts2.action.PrincipalAware.class);\n+\n+        MockActionInvocation mai = createActionInvocation(mock);\n+        mai.getInvocationContext().put(StrutsStatics.HTTP_REQUEST, req);\n+\n+        MockServletContext ctx = new MockServletContext();\n+        mai.getInvocationContext().put(StrutsStatics.SERVLET_CONTEXT, ctx);\n+\n+        mock.withPrincipalProxy(anyObject(ServletPrincipalProxy.class)); // less strict match is needed for this unit test to be conducted using mocks\n+        expectLastCall().times(1);\n+\n+        replay(mock);\n+        interceptor.intercept(mai);\n+        verify(mock);\n+    }\n+\n     public void testPrincipalProxy() throws Exception {\n         // uni test that does not use mock, but an Action so we also get code coverage for the PrincipalProxy class\n         MockHttpServletRequest req = new MockHttpServletRequest();\n@@ -251,6 +271,28 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n \n     }\n \n+    public void testActionPrincipalProxy() throws Exception {\n+        // unit test that does not use mock, but an Action so we also get code coverage for the PrincipalProxy class\n+        MockHttpServletRequest req = new MockHttpServletRequest();\n+        req.setUserPrincipal(null);\n+        req.setRemoteUser(\"Santa\");\n+\n+        MyNewPrincipalAction action = new MyNewPrincipalAction();\n+        MockActionInvocation mai = createActionInvocation(action);\n+        mai.getInvocationContext().put(StrutsStatics.HTTP_REQUEST, req);\n+\n+        assertNull(action.getProxy());\n+        interceptor.intercept(mai);\n+        assertNotNull(action.getProxy());\n+\n+        PrincipalProxy proxy = action.getProxy();\n+        assertNull(proxy.getUserPrincipal());\n+        assertFalse(proxy.isRequestSecure());\n+        assertFalse(proxy.isUserInRole(\"no.role\"));\n+        assertEquals(\"Santa\", proxy.getRemoteUser());\n+\n+    }\n+\n     public void testServletContextAware() throws Exception {\n         ServletContextAware mock = (ServletContextAware) createMock(ServletContextAware.class);\n \n@@ -305,4 +347,21 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n         }\n     }\n \n+    private class MyNewPrincipalAction implements Action, org.apache.struts2.action.PrincipalAware {\n+\n+        private PrincipalProxy proxy;\n+\n+        public String execute() throws Exception {\n+            return SUCCESS;\n+        }\n+\n+        public void withPrincipalProxy(PrincipalProxy proxy) {\n+            this.proxy = proxy;\n+        }\n+\n+        public PrincipalProxy getProxy() {\n+            return proxy;\n+        }\n+    }\n+\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "53b2e95fed545a332753cc92edf9812a52861a4c",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java?ref=384d418039998db6957b49cec806a7a0b2fd03a7",
                            "raw_url": "https://github.com/apache/struts/raw/384d418039998db6957b49cec806a7a0b2fd03a7/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\nindex 63ac9c913..53b2e95fe 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n@@ -61,6 +61,12 @@ public class PortletAwareInterceptor extends AbstractInterceptor implements Stru\n             PortletRequest request = (PortletRequest) context.get(PortletConstants.REQUEST);\n             ((PrincipalAware) action).setPrincipalProxy(new PortletPrincipalProxy(request));\n         }\n+\n+        if (action instanceof org.apache.struts2.action.PrincipalAware) {\n+            PortletRequest request = (PortletRequest) context.get(PortletConstants.REQUEST);\n+            ((org.apache.struts2.action.PrincipalAware) action).withPrincipalProxy(new PortletPrincipalProxy(request));\n+        }\n+\n         if (action instanceof PortletContextAware) {\n             PortletContext portletContext = (PortletContext) context.get(StrutsStatics.STRUTS_PORTLET_CONTEXT);\n             ((PortletContextAware) action).setPortletContext(portletContext);\n",
                            "security_relevancy": "potentially_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\384d418039998db6957b49cec806a7a0b2fd03a7"
                },
                {
                    "sha": "01016b458e7af42b8f645fa6d35c6e929e3fa4c0",
                    "message": "WW-4963 Implements new BundleContextAware interface\nthat uses withBundleContext instead of setBundleContext",
                    "files": [
                        {
                            "sha": "9c5464fcbac772be631828b0652259b7924f0bf6",
                            "filename": "bundles/demo/src/main/java/actions/osgi/BundlesAction.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/bundles%2Fdemo%2Fsrc%2Fmain%2Fjava%2Factions%2Fosgi%2FBundlesAction.java?ref=01016b458e7af42b8f645fa6d35c6e929e3fa4c0",
                            "raw_url": "https://github.com/apache/struts/raw/01016b458e7af42b8f645fa6d35c6e929e3fa4c0/bundles%2Fdemo%2Fsrc%2Fmain%2Fjava%2Factions%2Fosgi%2FBundlesAction.java",
                            "diff_file": "diff --git a/bundles/demo/src/main/java/actions/osgi/BundlesAction.java b/bundles/demo/src/main/java/actions/osgi/BundlesAction.java\nindex eff79ccce..9c5464fcb 100644\n--- a/bundles/demo/src/main/java/actions/osgi/BundlesAction.java\n+++ b/bundles/demo/src/main/java/actions/osgi/BundlesAction.java\n@@ -22,7 +22,7 @@ package actions.osgi;\n \n import com.opensymphony.xwork2.ActionSupport;\n import org.apache.struts2.convention.annotation.ResultPath;\n-import org.apache.struts2.osgi.interceptor.BundleContextAware;\n+import org.apache.struts2.osgi.action.BundleContextAware;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n \n@@ -33,7 +33,7 @@ import org.osgi.framework.BundleContext;\n public class BundlesAction extends ActionSupport implements BundleContextAware {\n     private BundleContext bundleContext;\n \n-    public void setBundleContext(BundleContext bundleContext) {\n+    public void withBundleContext(BundleContext bundleContext) {\n         this.bundleContext = bundleContext;\n     }\n \n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "c2be80aaa12d4a1358f0d2d325a8eccac7c53a60",
                            "filename": "plugins/osgi/src/main/java/org/apache/struts2/osgi/action/BundleContextAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Faction%2FBundleContextAware.java?ref=01016b458e7af42b8f645fa6d35c6e929e3fa4c0",
                            "raw_url": "https://github.com/apache/struts/raw/01016b458e7af42b8f645fa6d35c6e929e3fa4c0/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Faction%2FBundleContextAware.java",
                            "diff_file": "diff --git a/plugins/osgi/src/main/java/org/apache/struts2/osgi/action/BundleContextAware.java b/plugins/osgi/src/main/java/org/apache/struts2/osgi/action/BundleContextAware.java\nnew file mode 100644\nindex 000000000..c2be80aaa\n--- /dev/null\n+++ b/plugins/osgi/src/main/java/org/apache/struts2/osgi/action/BundleContextAware.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.osgi.action;\n+\n+import org.osgi.framework.BundleContext;\n+\n+/**\n+ * Actions implementing this interface will receive an instance of the BundleContext,\n+ * the OsgiInterceptor must be applied to the action.\n+ */\n+public interface BundleContextAware {\n+\n+    void withBundleContext(BundleContext bundleContext);\n+\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "d4ad98d3c1631a94e2221968e0b42bd9d42953fc",
                            "filename": "plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/BundleContextAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FBundleContextAware.java?ref=01016b458e7af42b8f645fa6d35c6e929e3fa4c0",
                            "raw_url": "https://github.com/apache/struts/raw/01016b458e7af42b8f645fa6d35c6e929e3fa4c0/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FBundleContextAware.java",
                            "diff_file": "diff --git a/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/BundleContextAware.java b/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/BundleContextAware.java\nindex d9eaf60e4..d4ad98d3c 100644\n--- a/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/BundleContextAware.java\n+++ b/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/BundleContextAware.java\n@@ -23,9 +23,16 @@ import org.osgi.framework.BundleContext;\n /**\n  * Actions implementing this interface will receive an instance of the BundleContext,\n  * the OsgiInterceptor must be applied to the action.\n+ *\n+ * @deprecated please use {@link org.apache.struts2.osgi.action.BundleContextAware} instead\n  */\n+@Deprecated\n public interface BundleContextAware {\n \n+    /**\n+     * @deprecated please use {@link org.apache.struts2.osgi.action.BundleContextAware#withBundleContext(BundleContext)} instead\n+     */\n+    @Deprecated\n     void setBundleContext(BundleContext bundleContext);\n \n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "11dd1f9a086231717cd6bf6b1984aab9c84f16ec",
                            "filename": "plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FOsgiInterceptor.java?ref=01016b458e7af42b8f645fa6d35c6e929e3fa4c0",
                            "raw_url": "https://github.com/apache/struts/raw/01016b458e7af42b8f645fa6d35c6e929e3fa4c0/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FOsgiInterceptor.java",
                            "diff_file": "diff --git a/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java b/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java\nindex 09b976927..11dd1f9a0 100644\n--- a/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java\n+++ b/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java\n@@ -51,6 +51,10 @@ public class OsgiInterceptor extends AbstractInterceptor {\n             if (action instanceof BundleContextAware)\n                 ((BundleContextAware)action).setBundleContext(bundleContext);\n \n+            if (action instanceof org.apache.struts2.osgi.action.BundleContextAware) {\n+                ((org.apache.struts2.osgi.action.BundleContextAware) action).withBundleContext(bundleContext);\n+            }\n+\n             //inject service implementations\n             if (action instanceof ServiceAware) {\n                 Type[] types = action.getClass().getGenericInterfaces();\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "96f2875696ede5f4690575451b3c221afafc292b",
                            "filename": "plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FOsgiInterceptorTest.java?ref=01016b458e7af42b8f645fa6d35c6e929e3fa4c0",
                            "raw_url": "https://github.com/apache/struts/raw/01016b458e7af42b8f645fa6d35c6e929e3fa4c0/plugins%2Fosgi%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FOsgiInterceptorTest.java",
                            "diff_file": "diff --git a/plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java b/plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java\nindex 9c4228079..96f287569 100644\n--- a/plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java\n+++ b/plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java\n@@ -53,6 +53,28 @@ public class OsgiInterceptorTest extends TestCase {\n         EasyMock.verify(bundleContextAware);\n     }\n \n+    public void testActionBundleContextAware() throws Exception {\n+        ServletContext servletContext = EasyMock.createStrictMock(ServletContext.class);\n+        BundleContext bundleContext = EasyMock.createStrictMock(BundleContext.class);\n+        ActionInvocation actionInvocation = EasyMock.createStrictMock(ActionInvocation.class);\n+        org.apache.struts2.osgi.action.BundleContextAware bundleContextAware = EasyMock.createStrictMock(org.apache.struts2.osgi.action.BundleContextAware.class);\n+\n+        EasyMock.expect(servletContext.getAttribute(OsgiHost.OSGI_BUNDLE_CONTEXT)).andReturn(bundleContext);\n+        EasyMock.expect(actionInvocation.getAction()).andReturn(bundleContextAware);\n+        bundleContextAware.withBundleContext(bundleContext);\n+        EasyMock.expect(actionInvocation.invoke()).andReturn(\"\");\n+\n+        EasyMock.replay(bundleContextAware);\n+        EasyMock.replay(servletContext);\n+        EasyMock.replay(actionInvocation);\n+\n+        OsgiInterceptor osgiInterceptor = new OsgiInterceptor();\n+        osgiInterceptor.setServletContext(servletContext);\n+        osgiInterceptor.intercept(actionInvocation);\n+\n+        EasyMock.verify(bundleContextAware);\n+    }\n+\n      public void testBundleContextAwareNegative() throws Exception {\n         ServletContext servletContext = EasyMock.createStrictMock(ServletContext.class);\n         ActionInvocation actionInvocation = EasyMock.createStrictMock(ActionInvocation.class);\n@@ -72,6 +94,25 @@ public class OsgiInterceptorTest extends TestCase {\n         EasyMock.verify(bundleContextAware);\n     }\n \n+     public void testActionBundleContextAwareNegative() throws Exception {\n+        ServletContext servletContext = EasyMock.createStrictMock(ServletContext.class);\n+        ActionInvocation actionInvocation = EasyMock.createStrictMock(ActionInvocation.class);\n+         org.apache.struts2.osgi.action.BundleContextAware bundleContextAware = EasyMock.createStrictMock(org.apache.struts2.osgi.action.BundleContextAware.class);\n+\n+        EasyMock.expect(servletContext.getAttribute(OsgiHost.OSGI_BUNDLE_CONTEXT)).andReturn(null);\n+        EasyMock.expect(actionInvocation.invoke()).andReturn(\"\");\n+\n+        EasyMock.replay(bundleContextAware);\n+        EasyMock.replay(servletContext);\n+        EasyMock.replay(actionInvocation);\n+\n+        OsgiInterceptor osgiInterceptor = new OsgiInterceptor();\n+        osgiInterceptor.setServletContext(servletContext);\n+        osgiInterceptor.intercept(actionInvocation);\n+\n+        EasyMock.verify(bundleContextAware);\n+    }\n+\n     public void testServiceAware() throws Exception {\n         ServletContext servletContext = EasyMock.createStrictMock(ServletContext.class);\n         BundleContext bundleContext = EasyMock.createStrictMock(BundleContext.class);\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\01016b458e7af42b8f645fa6d35c6e929e3fa4c0"
                },
                {
                    "sha": "23e9c88135116e420348b2f9867a81f0de2c63e6",
                    "message": "WW-4963 Implements new CookiesAware interface\nthat uses withCookies instead of setCookiesMap",
                    "files": [
                        {
                            "sha": "ba753869aee177c049a9ec07ce61b84bf581c272",
                            "filename": "core/src/main/java/org/apache/struts2/action/CookiesAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCookiesAware.java?ref=23e9c88135116e420348b2f9867a81f0de2c63e6",
                            "raw_url": "https://github.com/apache/struts/raw/23e9c88135116e420348b2f9867a81f0de2c63e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FCookiesAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/CookiesAware.java b/core/src/main/java/org/apache/struts2/action/CookiesAware.java\nnew file mode 100644\nindex 000000000..ba753869a\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/CookiesAware.java\n@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import org.apache.struts2.interceptor.CookieInterceptor;\n+\n+import java.util.Map;\n+\n+/**\n+ * Actions implementing the CookiesAware interface will receive\n+ * a Map of filtered cookies via the setCookiesMap method.\n+ *\n+ * Please note that the {@link CookieInterceptor} needs to be\n+ * activated to receive a cookies map.\n+ *\n+ * @since 2.6\n+ */\n+public interface CookiesAware {\n+    /**\n+     * Sets a map of filtered cookies.\n+     * @param cookies the cookies\n+     */\n+    void withCookies(Map<String, String> cookies);\n+}\n\\ No newline at end of file\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "eb40c3a53bdb76c0e138020eb03eefccfe8a8641",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/CookieInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookieInterceptor.java?ref=23e9c88135116e420348b2f9867a81f0de2c63e6",
                            "raw_url": "https://github.com/apache/struts/raw/23e9c88135116e420348b2f9867a81f0de2c63e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookieInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/CookieInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/CookieInterceptor.java\nindex 86578e77b..eb40c3a53 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/CookieInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/CookieInterceptor.java\n@@ -348,8 +348,8 @@ public class CookieInterceptor extends AbstractInterceptor {\n     }\n \n     /**\n-     * Hook that set the <code>cookiesMap</code> into action that implements\n-     * {@link CookiesAware}.\n+     * Hook that set the <code>cookiesMap</code> into action that implements {@link CookiesAware}\n+     * or {@link org.apache.struts2.action.CookiesAware}.\n      *\n      * @param action action object\n      * @param cookiesMap map of cookies\n@@ -359,5 +359,9 @@ public class CookieInterceptor extends AbstractInterceptor {\n             LOG.debug(\"Action [{}] implements CookiesAware, injecting cookies map [{}]\", action, cookiesMap);\n             ((CookiesAware)action).setCookiesMap(cookiesMap);\n         }\n+        if (action instanceof org.apache.struts2.action.CookiesAware) {\n+            LOG.debug(\"Action [{}] implements CookiesAware, injecting cookies map [{}]\", action, cookiesMap);\n+            ((org.apache.struts2.action.CookiesAware)action).withCookies(cookiesMap);\n+        }\n     }\n }\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "d3a0a02b1307e448d3f90c248d8d8a0952fa6417",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/CookiesAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookiesAware.java?ref=23e9c88135116e420348b2f9867a81f0de2c63e6",
                            "raw_url": "https://github.com/apache/struts/raw/23e9c88135116e420348b2f9867a81f0de2c63e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookiesAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/CookiesAware.java b/core/src/main/java/org/apache/struts2/interceptor/CookiesAware.java\nindex 0632e8326..d3a0a02b1 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/CookiesAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/CookiesAware.java\n@@ -26,11 +26,15 @@ import java.util.Map;\n  *\n  * Please note that the {@link CookieInterceptor} needs to be\n  * activated to receive a cookies map.\n+ *\n+ * @deprecated please use {@link org.apache.struts2.action.CookiesAware} instead\n  */\n+@Deprecated\n public interface CookiesAware {\n     /**\n      * Sets a map of filtered cookies.\n      * @param cookies the cookies\n+     * @deprecated please use {@link org.apache.struts2.action.CookiesAware#withCookies(Map)} instead\n      */\n     void setCookiesMap(Map<String, String> cookies);\n }\n\\ No newline at end of file\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "69d36ce4f06edc8e02ab4ed550fa6dfbf7883b35",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookieInterceptorTest.java?ref=23e9c88135116e420348b2f9867a81f0de2c63e6",
                            "raw_url": "https://github.com/apache/struts/raw/23e9c88135116e420348b2f9867a81f0de2c63e6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FCookieInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java\nindex fd374aee5..69d36ce4f 100644\n--- a/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java\n+++ b/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java\n@@ -426,6 +426,49 @@ public class CookieInterceptorTest extends StrutsInternalTestCase {\n         assertFalse(excludedName.get(reqCookieName));\n     }\n \n+    public void testActionCookieAwareWithStrutsInternalsAccess() throws Exception {\n+        MockHttpServletRequest request = new MockHttpServletRequest();\n+        String sessionCookieName = \"session.userId\";\n+        String sessionCookieValue = \"session.userId=1\";\n+        String appCookieName = \"application.userId\";\n+        String appCookieValue = \"application.userId=1\";\n+        String reqCookieName = \"request.userId\";\n+        String reqCookieValue = \"request.userId=1\";\n+\n+        request.setCookies(\n+                new Cookie(sessionCookieName, \"1\"),\n+                new Cookie(\"1\", sessionCookieValue),\n+                new Cookie(appCookieName, \"1\"),\n+                new Cookie(\"1\", appCookieValue),\n+                new Cookie(reqCookieName, \"1\"),\n+                new Cookie(\"1\", reqCookieValue)\n+            );\n+        ServletActionContext.setRequest(request);\n+\n+        final Map<String, Boolean> excludedName = new HashMap<>();\n+\n+        CookieInterceptor interceptor = new CookieInterceptor() {\n+            @Override\n+            protected boolean isAcceptableName(String name) {\n+                boolean accepted = super.isAcceptableName(name);\n+                excludedName.put(name, accepted);\n+                return accepted;\n+            }\n+        };\n+        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());\n+        interceptor.setAcceptedPatternsChecker(new DefaultAcceptedPatternsChecker());\n+        interceptor.setCookiesName(\"*\");\n+\n+        MockActionInvocation invocation = new MockActionInvocation();\n+        invocation.setAction(new MockActionWithActionCookieAware());\n+\n+        interceptor.intercept(invocation);\n+\n+        assertFalse(excludedName.get(sessionCookieName));\n+        assertFalse(excludedName.get(appCookieName));\n+        assertFalse(excludedName.get(reqCookieName));\n+    }\n+\n     public static class MockActionWithCookieAware extends ActionSupport implements CookiesAware {\n \n         private static final long serialVersionUID = -6202290616812813386L;\n@@ -453,4 +496,29 @@ public class CookieInterceptorTest extends StrutsInternalTestCase {\n         public void setCookie3(String cookie3) { this.cookie3 = cookie3; }\n     }\n \n+    public static class MockActionWithActionCookieAware extends ActionSupport implements org.apache.struts2.action.CookiesAware {\n+\n+        private Map cookies = Collections.EMPTY_MAP;\n+        private String cookie1;\n+        private String cookie2;\n+        private String cookie3;\n+\n+        public void withCookies(Map<String, String> cookies) {\n+            this.cookies = cookies;\n+        }\n+\n+        public Map getCookiesMap() {\n+            return this.cookies;\n+        }\n+\n+        public String getCookie1() { return cookie1; }\n+        public void setCookie1(String cookie1) { this.cookie1 = cookie1; }\n+\n+        public String getCookie2() { return cookie2; }\n+        public void setCookie2(String cookie2) { this.cookie2 = cookie2; }\n+\n+        public String getCookie3() { return cookie3; }\n+        public void setCookie3(String cookie3) { this.cookie3 = cookie3; }\n+    }\n+\n }\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\23e9c88135116e420348b2f9867a81f0de2c63e6"
                },
                {
                    "sha": "42245be546c8f8db57ca1b129022ed5a5c05ae89",
                    "message": "WW-4963 Implements new PortletContextAware interface\nthat uses withPortletContext instead of setPortletContext",
                    "files": [
                        {
                            "sha": "c34039794204e81ddcd7f0907c1a8cb487e0dc1b",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletContextAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Faction%2FPortletContextAware.java?ref=42245be546c8f8db57ca1b129022ed5a5c05ae89",
                            "raw_url": "https://github.com/apache/struts/raw/42245be546c8f8db57ca1b129022ed5a5c05ae89/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Faction%2FPortletContextAware.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletContextAware.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletContextAware.java\nnew file mode 100644\nindex 000000000..c34039794\n--- /dev/null\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletContextAware.java\n@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.portlet.action;\n+\n+import javax.portlet.PortletContext;\n+\n+/**\n+ * @since 2.6\n+ */\n+public interface PortletContextAware {\n+\n+    void withPortletContext(PortletContext portletContext);\n+\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "8fedf5d513d8908284aa78d6e466b72666703c5a",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java?ref=42245be546c8f8db57ca1b129022ed5a5c05ae89",
                            "raw_url": "https://github.com/apache/struts/raw/42245be546c8f8db57ca1b129022ed5a5c05ae89/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\nindex 53b2e95fe..8fedf5d51 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n@@ -71,6 +71,12 @@ public class PortletAwareInterceptor extends AbstractInterceptor implements Stru\n             PortletContext portletContext = (PortletContext) context.get(StrutsStatics.STRUTS_PORTLET_CONTEXT);\n             ((PortletContextAware) action).setPortletContext(portletContext);\n         }\n+\n+        if (action instanceof org.apache.struts2.portlet.action.PortletContextAware) {\n+            PortletContext portletContext = (PortletContext) context.get(StrutsStatics.STRUTS_PORTLET_CONTEXT);\n+            ((org.apache.struts2.portlet.action.PortletContextAware) action).withPortletContext(portletContext);\n+        }\n+\n         if (action instanceof PortletPreferencesAware) {\n         \tPortletRequest request = (PortletRequest) context.get(PortletConstants.REQUEST);\n             \n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "5ea01856a9ec82768077ade93c3a4c24151df46e",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletContextAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletContextAware.java?ref=42245be546c8f8db57ca1b129022ed5a5c05ae89",
                            "raw_url": "https://github.com/apache/struts/raw/42245be546c8f8db57ca1b129022ed5a5c05ae89/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletContextAware.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletContextAware.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletContextAware.java\nindex c917a2a4c..5ea01856a 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletContextAware.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletContextAware.java\n@@ -20,8 +20,15 @@ package org.apache.struts2.portlet.interceptor;\n \n import javax.portlet.PortletContext;\n \n+/**\n+ * @deprecated please use {@link org.apache.struts2.portlet.action.PortletContextAware} instead\n+ */\n+@Deprecated\n public interface PortletContextAware {\n \n-\tvoid setPortletContext(PortletContext portletContext);\n+    /**\n+     * @deprecated please use {@link org.apache.struts2.portlet.action.PortletContextAware#withPortletContext(PortletContext)} instead\n+     */\n+    void setPortletContext(PortletContext portletContext);\n \n }\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\42245be546c8f8db57ca1b129022ed5a5c05ae89"
                },
                {
                    "sha": "f59860026c890f0e2dcc3edea8a41f0e989027f9",
                    "message": "WW-4963 Implements new PortletPreferencesAware interface\nthat uses withPortletPreferences instead of setPortletPreferences",
                    "files": [
                        {
                            "sha": "da20c023b5f54ad49469f677e81b765bca1b38fa",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletPreferencesAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Faction%2FPortletPreferencesAware.java?ref=f59860026c890f0e2dcc3edea8a41f0e989027f9",
                            "raw_url": "https://github.com/apache/struts/raw/f59860026c890f0e2dcc3edea8a41f0e989027f9/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Faction%2FPortletPreferencesAware.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletPreferencesAware.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletPreferencesAware.java\nnew file mode 100644\nindex 000000000..da20c023b\n--- /dev/null\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletPreferencesAware.java\n@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.portlet.action;\n+\n+import javax.portlet.PortletPreferences;\n+\n+\n+/**\n+ * All Actions that want to have access to the portlet preferences should\n+ * implement this interface.  If running in a servlet environment, an\n+ * appropriate testing implementation will be provided.\n+ *\n+ * @since 2.6\n+ */\n+public interface PortletPreferencesAware {\n+\n+    /**\n+     * Sets the HTTP request object in implementing classes.\n+     *\n+     * @param preferences the portlet preferences.\n+     */\n+    void withPortletPreferences(PortletPreferences preferences);\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "a2be6a7c51ce74e3bdd4cf91c8484c52010af5c4",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java?ref=f59860026c890f0e2dcc3edea8a41f0e989027f9",
                            "raw_url": "https://github.com/apache/struts/raw/f59860026c890f0e2dcc3edea8a41f0e989027f9/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\nindex 8fedf5d51..a2be6a7c5 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n@@ -21,8 +21,8 @@ package org.apache.struts2.portlet.interceptor;\n import com.opensymphony.xwork2.ActionContext;\n import com.opensymphony.xwork2.ActionInvocation;\n import com.opensymphony.xwork2.interceptor.AbstractInterceptor;\n-import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.struts2.StrutsStatics;\n import org.apache.struts2.interceptor.PrincipalAware;\n import org.apache.struts2.portlet.PortletConstants;\n@@ -33,11 +33,11 @@ import javax.portlet.PortletResponse;\n \n public class PortletAwareInterceptor extends AbstractInterceptor implements StrutsStatics {\n \n-\tprivate static final long serialVersionUID = 2476509721059587700L;\n-\t\n-\tprivate static final Logger LOG = LogManager.getLogger(PortletAwareInterceptor.class);\n+    private static final long serialVersionUID = 2476509721059587700L;\n \n-\t/**\n+    private static final Logger LOG = LogManager.getLogger(PortletAwareInterceptor.class);\n+\n+    /**\n      * Sets action properties based on the interfaces an action implements. Things like application properties,\n      * parameters, session attributes, etc are set based on the implementing interface.\n      *\n@@ -78,16 +78,29 @@ public class PortletAwareInterceptor extends AbstractInterceptor implements Stru\n         }\n \n         if (action instanceof PortletPreferencesAware) {\n-        \tPortletRequest request = (PortletRequest) context.get(PortletConstants.REQUEST);\n-            \n+            PortletRequest request = (PortletRequest) context.get(PortletConstants.REQUEST);\n+\n             // Check if running in a servlet environment\n             if (request == null) {\n                 LOG.warn(\"This portlet preferences implementation should only be used during development\");\n-                ((PortletPreferencesAware)action).setPortletPreferences(new ServletPortletPreferences(ActionContext.getContext().getSession()));\n+                ((PortletPreferencesAware) action).setPortletPreferences(new ServletPortletPreferences(ActionContext.getContext().getSession()));\n             } else {\n-            \t((PortletPreferencesAware)action).setPortletPreferences(request.getPreferences());\n+                ((PortletPreferencesAware) action).setPortletPreferences(request.getPreferences());\n             }\n         }\n+\n+        if (action instanceof org.apache.struts2.portlet.action.PortletPreferencesAware) {\n+            PortletRequest request = (PortletRequest) context.get(PortletConstants.REQUEST);\n+\n+            // Check if running in a servlet environment\n+            if (request == null) {\n+                LOG.warn(\"This portlet preferences implementation should only be used during development\");\n+                ((org.apache.struts2.portlet.action.PortletPreferencesAware) action).withPortletPreferences(new ServletPortletPreferences(ActionContext.getContext().getSession()));\n+            } else {\n+                ((org.apache.struts2.portlet.action.PortletPreferencesAware) action).withPortletPreferences(request.getPreferences());\n+            }\n+        }\n+\n         return invocation.invoke();\n     }\n }\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "de39b25ebc5f202f07d0880faf495e18fc8dbe3d",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletPreferencesAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletPreferencesAware.java?ref=f59860026c890f0e2dcc3edea8a41f0e989027f9",
                            "raw_url": "https://github.com/apache/struts/raw/f59860026c890f0e2dcc3edea8a41f0e989027f9/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletPreferencesAware.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletPreferencesAware.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletPreferencesAware.java\nindex e7b61d9c4..de39b25eb 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletPreferencesAware.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletPreferencesAware.java\n@@ -25,13 +25,18 @@ import javax.portlet.PortletPreferences;\n  * All Actions that want to have access to the portlet preferences should\n  * implement this interface.  If running in a servlet environment, an\n  * appropriate testing implementation will be provided.\n+ *\n+ * @deprecated please use {@link org.apache.struts2.portlet.action.PortletPreferencesAware} instead\n  */\n+@Deprecated\n public interface PortletPreferencesAware {\n \n     /**\n      * Sets the HTTP request object in implementing classes.\n      *\n      * @param prefs the portlet preferences.\n+     * @deprecated please use {@link org.apache.struts2.portlet.action.PortletPreferencesAware#withPortletPreferences(PortletPreferences)} instead\n      */\n-    public void setPortletPreferences(PortletPreferences prefs);\n+    @Deprecated\n+    void setPortletPreferences(PortletPreferences prefs);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\f59860026c890f0e2dcc3edea8a41f0e989027f9"
                },
                {
                    "sha": "ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09",
                    "message": "WW-4963 Implements new PortletRequestAware interface\nthat uses withPortletRequest instead of setPortletRequest",
                    "files": [
                        {
                            "sha": "b7537fe87792c6b168bfc85d7092903b98d78f77",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletRequestAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Faction%2FPortletRequestAware.java?ref=ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09",
                            "raw_url": "https://github.com/apache/struts/raw/ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Faction%2FPortletRequestAware.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletRequestAware.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletRequestAware.java\nnew file mode 100644\nindex 000000000..b7537fe87\n--- /dev/null\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletRequestAware.java\n@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.portlet.action;\n+\n+import javax.portlet.PortletRequest;\n+\n+/**\n+ * @since 2.6\n+ */\n+public interface PortletRequestAware {\n+\n+    void withPortletRequest(PortletRequest request);\n+\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "8c7f5857ab6e15c8f81c69181f4e07efb7aa2d16",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java?ref=ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09",
                            "raw_url": "https://github.com/apache/struts/raw/ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\nindex a2be6a7c5..8c7f5857a 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n@@ -53,6 +53,11 @@ public class PortletAwareInterceptor extends AbstractInterceptor implements Stru\n             ((PortletRequestAware) action).setPortletRequest(request);\n         }\n \n+        if (action instanceof org.apache.struts2.portlet.action.PortletRequestAware) {\n+            PortletRequest request = (PortletRequest) context.get(PortletConstants.REQUEST);\n+            ((org.apache.struts2.portlet.action.PortletRequestAware) action).withPortletRequest(request);\n+        }\n+\n         if (action instanceof PortletResponseAware) {\n             PortletResponse response = (PortletResponse) context.get(PortletConstants.RESPONSE);\n             ((PortletResponseAware) action).setPortletResponse(response);\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "8903d9f4510de95c10436d995109caac91c43c4f",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletRequestAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletRequestAware.java?ref=ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09",
                            "raw_url": "https://github.com/apache/struts/raw/ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletRequestAware.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletRequestAware.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletRequestAware.java\nindex 8fee62a1a..8903d9f45 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletRequestAware.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletRequestAware.java\n@@ -20,8 +20,16 @@ package org.apache.struts2.portlet.interceptor;\n \n import javax.portlet.PortletRequest;\n \n+/**\n+ * @deprecated please use {@link org.apache.struts2.portlet.action.PortletRequestAware} instead\n+ */\n+@Deprecated\n public interface PortletRequestAware {\n \n-\tvoid setPortletRequest(PortletRequest request);\n+    /**\n+     * @deprecated please use {@link org.apache.struts2.portlet.action.PortletRequestAware#withPortletRequest(PortletRequest)} instead\n+     */\n+    @Deprecated\n+    void setPortletRequest(PortletRequest request);\n \n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "4443411f480dcb1f449694f0a4b35a72e5524c5f",
                            "filename": "plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptorTest.java?ref=ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09",
                            "raw_url": "https://github.com/apache/struts/raw/ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09/plugins%2Fportlet%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptorTest.java",
                            "diff_file": "diff --git a/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java b/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java\nindex 907ceaf9d..4443411f4 100644\n--- a/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java\n+++ b/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java\n@@ -30,33 +30,52 @@ import java.util.Map;\n \n public class PortletAwareInterceptorTest extends TestCase {\n \n-\tprivate PortletAwareInterceptor interceptor;\n-\t\n-\tprotected void setUp() throws Exception {\n-\t\tsuper.setUp();\n-\t\tinterceptor = new PortletAwareInterceptor();\n-\t}\n-\t\n-\tprotected void tearDown() throws Exception {\n-\t\tsuper.tearDown();\n-\t}\n-\t\n-\tpublic void testPortletRequestIsSet() throws Exception {\n-\t\tPortletRequest request = EasyMock.createMock(PortletRequest.class);\n-\t\tMap<String, Object> ctx = new HashMap<String, Object>();\n-\t\tctx.put(PortletConstants.REQUEST, request);\n-\t\tPortletRequestAware action = EasyMock.createMock(PortletRequestAware.class);\n-\t\taction.setPortletRequest(request);\n-\t\t\n-\t\tActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);\n-\t\tEasyMock.expect(invocation.getInvocationContext()).andReturn(new ActionContext(ctx));\n-\t\tEasyMock.expect(invocation.getAction()).andReturn(action);\n-\t\t\n-\t\tEasyMock.replay(action);\n-\t\tEasyMock.replay(invocation);\n-\t\t\n-\t\tinterceptor.intercept(invocation);\n-\t\t\n-\t\tEasyMock.verify(action);\n-\t}\n+    private PortletAwareInterceptor interceptor;\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        interceptor = new PortletAwareInterceptor();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testPortletRequestIsSet() throws Exception {\n+        PortletRequest request = EasyMock.createMock(PortletRequest.class);\n+        Map<String, Object> ctx = new HashMap<String, Object>();\n+        ctx.put(PortletConstants.REQUEST, request);\n+        PortletRequestAware action = EasyMock.createMock(PortletRequestAware.class);\n+        action.setPortletRequest(request);\n+\n+        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);\n+        EasyMock.expect(invocation.getInvocationContext()).andReturn(new ActionContext(ctx));\n+        EasyMock.expect(invocation.getAction()).andReturn(action);\n+\n+        EasyMock.replay(action);\n+        EasyMock.replay(invocation);\n+\n+        interceptor.intercept(invocation);\n+\n+        EasyMock.verify(action);\n+    }\n+\n+    public void testActionPortletRequestAware() throws Exception {\n+        PortletRequest request = EasyMock.createMock(PortletRequest.class);\n+        Map<String, Object> ctx = new HashMap<>();\n+        ctx.put(PortletConstants.REQUEST, request);\n+        org.apache.struts2.portlet.action.PortletRequestAware action = EasyMock.createMock(org.apache.struts2.portlet.action.PortletRequestAware.class);\n+        action.withPortletRequest(request);\n+\n+        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);\n+        EasyMock.expect(invocation.getInvocationContext()).andReturn(new ActionContext(ctx));\n+        EasyMock.expect(invocation.getAction()).andReturn(action);\n+\n+        EasyMock.replay(action);\n+        EasyMock.replay(invocation);\n+\n+        interceptor.intercept(invocation);\n+\n+        EasyMock.verify(action);\n+    }\n }\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\ec4a44567d6470ed1a9f457d857e8ce4ac4c3e09"
                },
                {
                    "sha": "5428252d5789c701174949d130e3e44cc7f99013",
                    "message": "WW-4963 Implements new PortletResponseAware interface with a test\nthat uses withPortletResponse instead of setPortletReponse",
                    "files": [
                        {
                            "sha": "007a65bb5722a20e8469b95edd27af416c8aac37",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletResponseAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Faction%2FPortletResponseAware.java?ref=5428252d5789c701174949d130e3e44cc7f99013",
                            "raw_url": "https://github.com/apache/struts/raw/5428252d5789c701174949d130e3e44cc7f99013/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Faction%2FPortletResponseAware.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletResponseAware.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletResponseAware.java\nnew file mode 100644\nindex 000000000..007a65bb5\n--- /dev/null\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/action/PortletResponseAware.java\n@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.portlet.action;\n+\n+import javax.portlet.PortletResponse;\n+\n+/**\n+ * @since 2.6\n+ */\n+public interface PortletResponseAware {\n+\n+    void withPortletResponse(PortletResponse response);\n+\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "420042e1d0119e76d8f69ecafc0464e7032e0582",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java?ref=5428252d5789c701174949d130e3e44cc7f99013",
                            "raw_url": "https://github.com/apache/struts/raw/5428252d5789c701174949d130e3e44cc7f99013/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptor.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\nindex 8c7f5857a..420042e1d 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptor.java\n@@ -62,6 +62,12 @@ public class PortletAwareInterceptor extends AbstractInterceptor implements Stru\n             PortletResponse response = (PortletResponse) context.get(PortletConstants.RESPONSE);\n             ((PortletResponseAware) action).setPortletResponse(response);\n         }\n+\n+        if (action instanceof org.apache.struts2.portlet.action.PortletResponseAware) {\n+            PortletResponse response = (PortletResponse) context.get(PortletConstants.RESPONSE);\n+            ((org.apache.struts2.portlet.action.PortletResponseAware) action).withPortletResponse(response);\n+        }\n+\n         if (action instanceof PrincipalAware) {\n             PortletRequest request = (PortletRequest) context.get(PortletConstants.REQUEST);\n             ((PrincipalAware) action).setPrincipalProxy(new PortletPrincipalProxy(request));\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "dc4f71b93d38981b1523868cdddae64ddc6fb2fa",
                            "filename": "plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletResponseAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletResponseAware.java?ref=5428252d5789c701174949d130e3e44cc7f99013",
                            "raw_url": "https://github.com/apache/struts/raw/5428252d5789c701174949d130e3e44cc7f99013/plugins%2Fportlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletResponseAware.java",
                            "diff_file": "diff --git a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletResponseAware.java b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletResponseAware.java\nindex 48cbb445a..dc4f71b93 100644\n--- a/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletResponseAware.java\n+++ b/plugins/portlet/src/main/java/org/apache/struts2/portlet/interceptor/PortletResponseAware.java\n@@ -20,8 +20,16 @@ package org.apache.struts2.portlet.interceptor;\n \n import javax.portlet.PortletResponse;\n \n+/**\n+ * @deprecated please use {@link org.apache.struts2.portlet.action.PortletResponseAware} instead\n+ */\n+@Deprecated\n public interface PortletResponseAware {\n \n+\t/**\n+\t * @deprecated please use {@link org.apache.struts2.portlet.action.PortletResponseAware#withPortletResponse(PortletResponse)} instead\n+\t */\n+\t@Deprecated\n \tvoid setPortletResponse(PortletResponse response);\n \n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "b9664c9e5c296f01438561082d69732d59daa9a0",
                            "filename": "plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fportlet%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptorTest.java?ref=5428252d5789c701174949d130e3e44cc7f99013",
                            "raw_url": "https://github.com/apache/struts/raw/5428252d5789c701174949d130e3e44cc7f99013/plugins%2Fportlet%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fportlet%2Finterceptor%2FPortletAwareInterceptorTest.java",
                            "diff_file": "diff --git a/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java b/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java\nindex 4443411f4..b9664c9e5 100644\n--- a/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java\n+++ b/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletAwareInterceptorTest.java\n@@ -25,6 +25,7 @@ import org.apache.struts2.portlet.PortletConstants;\n import org.easymock.EasyMock;\n \n import javax.portlet.PortletRequest;\n+import javax.portlet.PortletResponse;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -78,4 +79,23 @@ public class PortletAwareInterceptorTest extends TestCase {\n \n         EasyMock.verify(action);\n     }\n+\n+    public void testActionPortletResponseAware() throws Exception {\n+        PortletResponse response = EasyMock.createMock(PortletResponse.class);\n+        Map<String, Object> ctx = new HashMap<>();\n+        ctx.put(PortletConstants.RESPONSE, response);\n+        org.apache.struts2.portlet.action.PortletResponseAware action = EasyMock.createMock(org.apache.struts2.portlet.action.PortletResponseAware.class);\n+        action.withPortletResponse(response);\n+\n+        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);\n+        EasyMock.expect(invocation.getInvocationContext()).andReturn(new ActionContext(ctx));\n+        EasyMock.expect(invocation.getAction()).andReturn(action);\n+\n+        EasyMock.replay(action);\n+        EasyMock.replay(invocation);\n+\n+        interceptor.intercept(invocation);\n+\n+        EasyMock.verify(action);\n+    }\n }\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\5428252d5789c701174949d130e3e44cc7f99013"
                },
                {
                    "sha": "56fc731670167878e6b42fdd3a113e62dc871a1d",
                    "message": "WW-4963 Implements new ParametersAware interface\nthat uses withParameters instead of setHttpParameters\nand cleans up logic a bit",
                    "files": [
                        {
                            "sha": "475d603c06356bda167da0146da24f5077594865",
                            "filename": "core/src/main/java/org/apache/struts2/action/ParametersAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FParametersAware.java?ref=56fc731670167878e6b42fdd3a113e62dc871a1d",
                            "raw_url": "https://github.com/apache/struts/raw/56fc731670167878e6b42fdd3a113e62dc871a1d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FParametersAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/ParametersAware.java b/core/src/main/java/org/apache/struts2/action/ParametersAware.java\nnew file mode 100644\nindex 000000000..475d603c0\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/ParametersAware.java\n@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import org.apache.struts2.dispatcher.HttpParameters;\n+\n+/**\n+ * This interface gives actions an alternative way of receiving input parameters. The parameters will\n+ * contain all input parameters as implementation of {@link org.apache.struts2.dispatcher.Parameter}.\n+ * Actions that need this should simply implement it.\n+ *\n+ * One common use for this is to have the action propagate parameters to internally instantiated data\n+ * objects.\n+ *\n+ * @since 2.6\n+ */\n+public interface ParametersAware {\n+\n+    /**\n+     * Sets the HTTP parameters in the implementing class.\n+     *\n+     * @param parameters an instance of {@link HttpParameters}.\n+     */\n+    void withParameters(HttpParameters parameters);\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "c27a0569499e18d4860ff93db14e8981dbb773c0",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/HttpParametersAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FHttpParametersAware.java?ref=56fc731670167878e6b42fdd3a113e62dc871a1d",
                            "raw_url": "https://github.com/apache/struts/raw/56fc731670167878e6b42fdd3a113e62dc871a1d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FHttpParametersAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/HttpParametersAware.java b/core/src/main/java/org/apache/struts2/interceptor/HttpParametersAware.java\nindex 66f2a1d44..c27a05694 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/HttpParametersAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/HttpParametersAware.java\n@@ -31,13 +31,19 @@ import org.apache.struts2.dispatcher.HttpParameters;\n  * One common use for this is to have the action propagate parameters to internally instantiated data\n  * objects.\n  * </p>\n+ *\n+ * @deprecated please use {@link org.apache.struts2.action.ParametersAware} instead\n  */\n+@Deprecated\n public interface HttpParametersAware {\n \n     /**\n      * Sets the HTTP parameters in the implementing class.\n      *\n      * @param parameters an instance of {@link HttpParameters}.\n+     *\n+     * @deprecated please use {@link org.apache.struts2.action.ParametersAware#withParameters(HttpParameters)} instead\n      */\n+    @Deprecated\n     void setParameters(HttpParameters parameters);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "9689e36b91f7a5ebef34430acc022e92751b0aae",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ParameterAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FParameterAware.java?ref=56fc731670167878e6b42fdd3a113e62dc871a1d",
                            "raw_url": "https://github.com/apache/struts/raw/56fc731670167878e6b42fdd3a113e62dc871a1d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FParameterAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ParameterAware.java b/core/src/main/java/org/apache/struts2/interceptor/ParameterAware.java\nindex 28eb7491f..9689e36b9 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ParameterAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ParameterAware.java\n@@ -36,7 +36,7 @@ import java.util.Map;\n  * the map is <tt>java.lang.String[]</tt>.\n  * </p>\n  *\n- * @deprecated please use {@link HttpParametersAware} instead\n+ * @deprecated please use {@link org.apache.struts2.action.ParametersAware} instead\n  */\n @Deprecated\n public interface ParameterAware {\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "e8e73eee5d54c684b6a2f4ac5e6dac155d847aae",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/RequestAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FRequestAware.java?ref=56fc731670167878e6b42fdd3a113e62dc871a1d",
                            "raw_url": "https://github.com/apache/struts/raw/56fc731670167878e6b42fdd3a113e62dc871a1d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FRequestAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/RequestAware.java b/core/src/main/java/org/apache/struts2/interceptor/RequestAware.java\nindex 8a7e87072..e8e73eee5 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/RequestAware.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/RequestAware.java\n@@ -18,6 +18,8 @@\n  */\n package org.apache.struts2.interceptor;\n \n+import org.apache.struts2.dispatcher.HttpParameters;\n+\n import java.util.Map;\n \n /**\n@@ -28,13 +30,17 @@ import java.util.Map;\n  * <p>\n  * This interface is only relevant if the Action is used in a servlet environment.\n  * </p>\n+ * @deprecated please use {@link org.apache.struts2.action.ParametersAware} instead\n  */\n+@Deprecated\n public interface RequestAware {\n \n     /**\n      * Sets the Map of request attributes in the implementing class.\n      *\n      * @param request a Map of HTTP request attribute name/value pairs.\n+     * @deprecated please use {@link org.apache.struts2.action.ParametersAware#withParameters(HttpParameters)} instead\n      */\n+    @Deprecated\n     public void setRequest(Map<String,Object> request);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "0312da9ff341a47c20b7b5f57035f130492ea9bb",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java?ref=56fc731670167878e6b42fdd3a113e62dc871a1d",
                            "raw_url": "https://github.com/apache/struts/raw/56fc731670167878e6b42fdd3a113e62dc871a1d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\nindex 302fcba66..0312da9ff 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n@@ -25,6 +25,7 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.struts2.StrutsStatics;\n+import org.apache.struts2.action.ParametersAware;\n import org.apache.struts2.interceptor.servlet.ServletPrincipalProxy;\n import org.apache.struts2.util.ServletContextAware;\n \n@@ -103,7 +104,7 @@ import com.opensymphony.xwork2.interceptor.AbstractInterceptor;\n  * @see ServletRequestAware\n  * @see ServletResponseAware\n  * @see ParameterAware\n- * @see HttpParametersAware\n+ * @see ParametersAware\n  * @see SessionAware\n  * @see ApplicationAware\n  * @see PrincipalAware\n@@ -151,6 +152,10 @@ public class ServletConfigInterceptor extends AbstractInterceptor implements Str\n             ((HttpParametersAware) action).setParameters(context.getParameters());\n         }\n \n+        if (action instanceof ParametersAware) {\n+            ((ParametersAware) action).withParameters(context.getParameters());\n+        }\n+\n         if (action instanceof ApplicationAware) {\n             ((ApplicationAware) action).setApplication(context.getApplication());\n         }\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "4bb8684d99c2c0b5f3266355d68de9b59fa3d605",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java?ref=56fc731670167878e6b42fdd3a113e62dc871a1d",
                            "raw_url": "https://github.com/apache/struts/raw/56fc731670167878e6b42fdd3a113e62dc871a1d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\nindex 4306aaa8b..4bb8684d9 100644\n--- a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n+++ b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n@@ -23,6 +23,7 @@ import com.opensymphony.xwork2.ActionContext;\n import com.opensymphony.xwork2.mock.MockActionInvocation;\n import org.apache.struts2.StrutsInternalTestCase;\n import org.apache.struts2.StrutsStatics;\n+import org.apache.struts2.action.ParametersAware;\n import org.apache.struts2.dispatcher.HttpParameters;\n import org.apache.struts2.interceptor.servlet.ServletPrincipalProxy;\n import org.apache.struts2.util.ServletContextAware;\n@@ -145,6 +146,22 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n         verify(mock);\n     }\n \n+    public void testActionParametersAware() throws Exception {\n+        ParametersAware mock = createMock(ParametersAware.class);\n+\n+        MockActionInvocation mai = createActionInvocation(mock);\n+\n+        HttpParameters params = HttpParameters.create().build();\n+        mai.getInvocationContext().setParameters(params);\n+\n+        mock.withParameters(params);\n+        expectLastCall().times(1);\n+\n+        replay(mock);\n+        interceptor.intercept(mai);\n+        verify(mock);\n+    }\n+\n     public void testSessionAware() throws Exception {\n         SessionAware mock = (SessionAware) createMock(SessionAware.class);\n \n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\56fc731670167878e6b42fdd3a113e62dc871a1d"
                },
                {
                    "sha": "8cf787b39c1077f8db47c7f1bd7d91bfcc78c222",
                    "message": "WW-4963 Implements new ServiceAware interface\nthat uses withServices instead of setServices",
                    "files": [
                        {
                            "sha": "45d356610586246361bbd5c730f5182b523af5c8",
                            "filename": "plugins/osgi/src/main/java/org/apache/struts2/osgi/action/ServiceAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Faction%2FServiceAware.java?ref=8cf787b39c1077f8db47c7f1bd7d91bfcc78c222",
                            "raw_url": "https://github.com/apache/struts/raw/8cf787b39c1077f8db47c7f1bd7d91bfcc78c222/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Faction%2FServiceAware.java",
                            "diff_file": "diff --git a/plugins/osgi/src/main/java/org/apache/struts2/osgi/action/ServiceAware.java b/plugins/osgi/src/main/java/org/apache/struts2/osgi/action/ServiceAware.java\nnew file mode 100644\nindex 000000000..45d356610\n--- /dev/null\n+++ b/plugins/osgi/src/main/java/org/apache/struts2/osgi/action/ServiceAware.java\n@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.osgi.action;\n+\n+import java.util.List;\n+\n+/**\n+ * Classes implementing this interface, will be injected a list of services\n+ * registered with the type of the parameterized type\n+ *\n+ * @param <T> The type of the service\n+ * @since 2.6\n+ */\n+public interface ServiceAware<T> {\n+\n+    void withServices(List<T> services);\n+\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "62c676ce046b1db598e5b9e7fcb12f6994feca28",
                            "filename": "plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FOsgiInterceptor.java?ref=8cf787b39c1077f8db47c7f1bd7d91bfcc78c222",
                            "raw_url": "https://github.com/apache/struts/raw/8cf787b39c1077f8db47c7f1bd7d91bfcc78c222/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FOsgiInterceptor.java",
                            "diff_file": "diff --git a/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java b/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java\nindex 11dd1f9a0..62c676ce0 100644\n--- a/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java\n+++ b/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/OsgiInterceptor.java\n@@ -21,10 +21,11 @@ package org.apache.struts2.osgi.interceptor;\n import com.opensymphony.xwork2.ActionInvocation;\n import com.opensymphony.xwork2.inject.Inject;\n import com.opensymphony.xwork2.interceptor.AbstractInterceptor;\n-import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.struts2.osgi.host.OsgiHost;\n import org.osgi.framework.BundleContext;\n+import org.osgi.framework.InvalidSyntaxException;\n import org.osgi.framework.ServiceReference;\n \n import javax.servlet.ServletContext;\n@@ -46,51 +47,93 @@ public class OsgiInterceptor extends AbstractInterceptor {\n     public String intercept(ActionInvocation invocation) throws Exception {\n         if (bundleContext != null) {\n             Object action = invocation.getAction();\n+            injectBundleContext(action);\n+            injectServicesUsingDeprecatedInterface(action);\n+            injectServices(action);\n+        } else if (LOG.isWarnEnabled()) {\n+            LOG.warn(\"The OSGi interceptor was not able to find the BundleContext in the ServletContext\");\n+        }\n \n-            //inject BundleContext\n-            if (action instanceof BundleContextAware)\n-                ((BundleContextAware)action).setBundleContext(bundleContext);\n+        return invocation.invoke();\n+    }\n \n-            if (action instanceof org.apache.struts2.osgi.action.BundleContextAware) {\n-                ((org.apache.struts2.osgi.action.BundleContextAware) action).withBundleContext(bundleContext);\n-            }\n+    private void injectBundleContext(Object action) {\n+        if (action instanceof BundleContextAware)\n+            ((BundleContextAware) action).setBundleContext(bundleContext);\n \n-            //inject service implementations\n-            if (action instanceof ServiceAware) {\n-                Type[] types = action.getClass().getGenericInterfaces();\n-                if (types != null) {\n-                    for (Type type : types) {\n-                        if (type instanceof ParameterizedType) {\n-                            ParameterizedType parameterizedType = (ParameterizedType) type;\n-                            if (parameterizedType.getRawType() instanceof Class) {\n-                                Class clazz = (Class) parameterizedType.getRawType();\n-                                if (ServiceAware.class.equals(clazz)) {\n-                                    Class serviceClass = (Class) parameterizedType.getActualTypeArguments()[0];\n-                                    ServiceReference[] refs = bundleContext.getAllServiceReferences(serviceClass.getName(), null);\n-                                    //get the services\n-                                    if (refs != null) {\n-                                        List services = new ArrayList(refs.length);\n-                                        for (ServiceReference ref : refs) {\n-                                            Object service = bundleContext.getService(ref);\n-                                            //wow, that's a lot of nested ifs\n-                                            if (service != null)\n-                                                services.add(service);\n-                                        }\n+        if (action instanceof org.apache.struts2.osgi.action.BundleContextAware) {\n+            ((org.apache.struts2.osgi.action.BundleContextAware) action).withBundleContext(bundleContext);\n+        }\n+    }\n \n-                                        if (!services.isEmpty())\n-                                            ((ServiceAware)action).setServices(services);\n+    @Deprecated\n+    private void injectServicesUsingDeprecatedInterface(Object action) throws InvalidSyntaxException {\n+        //inject service implementations\n+        if (action instanceof ServiceAware) {\n+            Type[] types = action.getClass().getGenericInterfaces();\n+            if (types != null) {\n+                for (Type type : types) {\n+                    if (type instanceof ParameterizedType) {\n+                        ParameterizedType parameterizedType = (ParameterizedType) type;\n+                        if (parameterizedType.getRawType() instanceof Class) {\n+                            Class clazz = (Class) parameterizedType.getRawType();\n+                            if (ServiceAware.class.equals(clazz)) {\n+                                Class serviceClass = (Class) parameterizedType.getActualTypeArguments()[0];\n+                                ServiceReference[] refs = bundleContext.getAllServiceReferences(serviceClass.getName(), null);\n+                                //get the services\n+                                if (refs != null) {\n+                                    List services = new ArrayList(refs.length);\n+                                    for (ServiceReference ref : refs) {\n+                                        Object service = bundleContext.getService(ref);\n+                                        //wow, that's a lot of nested ifs\n+                                        if (service != null)\n+                                            services.add(service);\n                                     }\n+\n+                                    if (!services.isEmpty())\n+                                        ((ServiceAware) action).setServices(services);\n                                 }\n                             }\n                         }\n                     }\n                 }\n             }\n-        } else if (LOG.isWarnEnabled()){\n-            LOG.warn(\"The OSGi interceptor was not able to find the BundleContext in the ServletContext\");          \n         }\n+    }\n \n-        return invocation.invoke();\n+    private void injectServices(Object action) throws InvalidSyntaxException {\n+        //inject service implementations\n+        if (action instanceof org.apache.struts2.osgi.action.ServiceAware) {\n+            Type[] types = action.getClass().getGenericInterfaces();\n+            if (types != null) {\n+                for (Type type : types) {\n+                    if (type instanceof ParameterizedType) {\n+                        ParameterizedType parameterizedType = (ParameterizedType) type;\n+                        if (parameterizedType.getRawType() instanceof Class) {\n+                            Class clazz = (Class) parameterizedType.getRawType();\n+                            if (org.apache.struts2.osgi.action.ServiceAware.class.equals(clazz)) {\n+                                Class serviceClass = (Class) parameterizedType.getActualTypeArguments()[0];\n+                                ServiceReference[] refs = bundleContext.getAllServiceReferences(serviceClass.getName(), null);\n+                                //get the services\n+                                if (refs != null) {\n+                                    List<Object> services = new ArrayList<>(refs.length);\n+                                    for (ServiceReference ref : refs) {\n+                                        Object service = bundleContext.getService(ref);\n+                                        //wow, that's a lot of nested ifs\n+                                        if (service != null)\n+                                            services.add(service);\n+                                    }\n+\n+                                    if (!services.isEmpty()) {\n+                                        ((org.apache.struts2.osgi.action.ServiceAware) action).withServices(services);\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     @Inject\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "c5c1c8e83e6fd5c18b4f2715ff7519fcbe37c23a",
                            "filename": "plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/ServiceAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FServiceAware.java?ref=8cf787b39c1077f8db47c7f1bd7d91bfcc78c222",
                            "raw_url": "https://github.com/apache/struts/raw/8cf787b39c1077f8db47c7f1bd7d91bfcc78c222/plugins%2Fosgi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FServiceAware.java",
                            "diff_file": "diff --git a/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/ServiceAware.java b/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/ServiceAware.java\nindex bc6e916fe..c5c1c8e83 100644\n--- a/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/ServiceAware.java\n+++ b/plugins/osgi/src/main/java/org/apache/struts2/osgi/interceptor/ServiceAware.java\n@@ -24,9 +24,15 @@ import java.util.List;\n  * Classes implementing this interface, will be injected a list of services\n  * registered with the type of the parameterized type\n  * @param <T> The type of the service\n+ * @deprecated please use {@link org.apache.struts2.osgi.action.ServiceAware} instead\n  */\n+@Deprecated\n public interface ServiceAware<T> {\n \n+    /**\n+     * @deprecated please use {@link org.apache.struts2.osgi.action.ServiceAware#withServices(List)} instead\n+     */\n+    @Deprecated\n     void setServices(List<T> services);\n \n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "df6c2588aa717f453d088cfe26c628e663924696",
                            "filename": "plugins/osgi/src/test/java/org/apache/struts2/osgi/action/ServiceAction.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Faction%2FServiceAction.java?ref=8cf787b39c1077f8db47c7f1bd7d91bfcc78c222",
                            "raw_url": "https://github.com/apache/struts/raw/8cf787b39c1077f8db47c7f1bd7d91bfcc78c222/plugins%2Fosgi%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Faction%2FServiceAction.java",
                            "diff_file": "diff --git a/plugins/osgi/src/test/java/org/apache/struts2/osgi/action/ServiceAction.java b/plugins/osgi/src/test/java/org/apache/struts2/osgi/action/ServiceAction.java\nnew file mode 100644\nindex 000000000..df6c2588a\n--- /dev/null\n+++ b/plugins/osgi/src/test/java/org/apache/struts2/osgi/action/ServiceAction.java\n@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.osgi.action;\n+\n+import java.util.List;\n+\n+public class ServiceAction implements ServiceAware<Object> {\n+    private List<Object> services;\n+\n+\n+    public List<Object> getServices() {\n+        return services;\n+    }\n+\n+    public void withServices(List<Object> services) {\n+        this.services = services;\n+    }\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "e464d405ec8a160c4400411abb5d95eebd6e9248",
                            "filename": "plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins%2Fosgi%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FOsgiInterceptorTest.java?ref=8cf787b39c1077f8db47c7f1bd7d91bfcc78c222",
                            "raw_url": "https://github.com/apache/struts/raw/8cf787b39c1077f8db47c7f1bd7d91bfcc78c222/plugins%2Fosgi%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Finterceptor%2FOsgiInterceptorTest.java",
                            "diff_file": "diff --git a/plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java b/plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java\nindex 96f287569..e464d405e 100644\n--- a/plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java\n+++ b/plugins/osgi/src/test/java/org/apache/struts2/osgi/interceptor/OsgiInterceptorTest.java\n@@ -18,6 +18,7 @@\n  */\n package org.apache.struts2.osgi.interceptor;\n \n+import org.apache.struts2.osgi.action.ServiceAction;\n import org.easymock.EasyMock;\n import org.apache.struts2.osgi.host.OsgiHost;\n import org.osgi.framework.BundleContext;\n@@ -141,4 +142,33 @@ public class OsgiInterceptorTest extends TestCase {\n         assertNotNull(objects);\n         assertSame(someObject, objects.get(0));\n     }\n+\n+    public void testActionServiceAware() throws Exception {\n+        ServletContext servletContext = EasyMock.createStrictMock(ServletContext.class);\n+        BundleContext bundleContext = EasyMock.createStrictMock(BundleContext.class);\n+        ActionInvocation actionInvocation = EasyMock.createStrictMock(ActionInvocation.class);\n+        ServiceAction serviceAction = new ServiceAction();\n+\n+        //service refs\n+        ServiceReference objectRef = EasyMock.createNiceMock(ServiceReference.class);\n+        Object someObject = new Object();\n+\n+        EasyMock.expect(servletContext.getAttribute(OsgiHost.OSGI_BUNDLE_CONTEXT)).andReturn(bundleContext);\n+        EasyMock.expect(actionInvocation.getAction()).andReturn(serviceAction);\n+        EasyMock.expect(actionInvocation.invoke()).andReturn(\"\");\n+        EasyMock.expect(bundleContext.getAllServiceReferences(Object.class.getName(), null)).andReturn(new ServiceReference[] {objectRef});\n+        EasyMock.expect(bundleContext.getService(objectRef)).andReturn(someObject);\n+\n+        EasyMock.replay(bundleContext);\n+        EasyMock.replay(servletContext);\n+        EasyMock.replay(actionInvocation);\n+\n+        OsgiInterceptor osgiInterceptor = new OsgiInterceptor();\n+        osgiInterceptor.setServletContext(servletContext);\n+        osgiInterceptor.intercept(actionInvocation);\n+\n+        List<Object> objects = serviceAction.getServices();\n+        assertNotNull(objects);\n+        assertSame(someObject, objects.get(0));\n+    }\n }\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\8cf787b39c1077f8db47c7f1bd7d91bfcc78c222"
                },
                {
                    "sha": "b608549933bd2a6fa954ec35beae11519a6632a2",
                    "message": "WW-4963 Implements new ServletContextAware interface and fixes actions\nthat uses withServletContext instead of setServletContext",
                    "files": [
                        {
                            "sha": "56dbf9bfb96b040cb539727ecf2829856d5ed9a0",
                            "filename": "apps/showcase/src/main/java/org/apache/struts2/showcase/source/ViewSourceAction.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/apps%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fshowcase%2Fsource%2FViewSourceAction.java?ref=b608549933bd2a6fa954ec35beae11519a6632a2",
                            "raw_url": "https://github.com/apache/struts/raw/b608549933bd2a6fa954ec35beae11519a6632a2/apps%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fshowcase%2Fsource%2FViewSourceAction.java",
                            "diff_file": "diff --git a/apps/showcase/src/main/java/org/apache/struts2/showcase/source/ViewSourceAction.java b/apps/showcase/src/main/java/org/apache/struts2/showcase/source/ViewSourceAction.java\nindex 3b71fa68e..56dbf9bfb 100644\n--- a/apps/showcase/src/main/java/org/apache/struts2/showcase/source/ViewSourceAction.java\n+++ b/apps/showcase/src/main/java/org/apache/struts2/showcase/source/ViewSourceAction.java\n@@ -23,7 +23,7 @@ package org.apache.struts2.showcase.source;\n import com.opensymphony.xwork2.ActionSupport;\n import com.opensymphony.xwork2.util.ClassLoaderUtil;\n import org.apache.struts2.ServletActionContext;\n-import org.apache.struts2.util.ServletContextAware;\n+import org.apache.struts2.action.ServletContextAware;\n \n import javax.servlet.ServletContext;\n import java.io.BufferedReader;\n@@ -227,7 +227,7 @@ public class ViewSourceAction extends ActionSupport implements ServletContextAwa\n \t\treturn snippet;\n \t}\n \n-\tpublic void setServletContext(ServletContext arg0) {\n+\tpublic void withServletContext(ServletContext arg0) {\n \t\tthis.servletContext = arg0;\n \t}\n \n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "cf6edb07f89240f52d1b16756ed9e49458e5f1a3",
                            "filename": "bundles/admin/src/main/java/org/apache/struts2/osgi/admin/actions/BundlesAction.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/bundles%2Fadmin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Fadmin%2Factions%2FBundlesAction.java?ref=b608549933bd2a6fa954ec35beae11519a6632a2",
                            "raw_url": "https://github.com/apache/struts/raw/b608549933bd2a6fa954ec35beae11519a6632a2/bundles%2Fadmin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Fosgi%2Fadmin%2Factions%2FBundlesAction.java",
                            "diff_file": "diff --git a/bundles/admin/src/main/java/org/apache/struts2/osgi/admin/actions/BundlesAction.java b/bundles/admin/src/main/java/org/apache/struts2/osgi/admin/actions/BundlesAction.java\nindex 5d81de896..cf6edb07f 100644\n--- a/bundles/admin/src/main/java/org/apache/struts2/osgi/admin/actions/BundlesAction.java\n+++ b/bundles/admin/src/main/java/org/apache/struts2/osgi/admin/actions/BundlesAction.java\n@@ -28,7 +28,7 @@ import com.opensymphony.xwork2.inject.Inject;\n import org.apache.struts2.osgi.BundleAccessor;\n import org.apache.struts2.osgi.host.OsgiHost;\n import org.apache.struts2.osgi.StrutsOsgiListener;\n-import org.apache.struts2.util.ServletContextAware;\n+import org.apache.struts2.action.ServletContextAware;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleException;\n \n@@ -197,7 +197,7 @@ public class BundlesAction extends ActionSupport implements ServletContextAware\n         this.bundleAccessor = bundleAccessor;\n     }\n \n-    public void setServletContext(ServletContext servletContext) {\n+    public void withServletContext(ServletContext servletContext) {\n         osgiHost = (OsgiHost) servletContext.getAttribute(StrutsOsgiListener.OSGI_HOST);\n     }\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "09a99d081b1a06cbff7136a02eb6e01db75d1942",
                            "filename": "core/src/main/java/org/apache/struts2/action/ServletContextAware.java",
                            "status": "added",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FServletContextAware.java?ref=b608549933bd2a6fa954ec35beae11519a6632a2",
                            "raw_url": "https://github.com/apache/struts/raw/b608549933bd2a6fa954ec35beae11519a6632a2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Faction%2FServletContextAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/action/ServletContextAware.java b/core/src/main/java/org/apache/struts2/action/ServletContextAware.java\nnew file mode 100644\nindex 000000000..09a99d081\n--- /dev/null\n+++ b/core/src/main/java/org/apache/struts2/action/ServletContextAware.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.struts2.action;\n+\n+import javax.servlet.ServletContext;\n+\n+/**\n+ * For components that have a dependence on the Servlet context.\n+ *\n+ * @since 2.6\n+ */\n+public interface ServletContextAware {\n+\n+    void withServletContext(ServletContext context);\n+}\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "97078962353a853d25d3c05ed9eab0639fde4b95",
                            "filename": "core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java?ref=b608549933bd2a6fa954ec35beae11519a6632a2",
                            "raw_url": "https://github.com/apache/struts/raw/b608549933bd2a6fa954ec35beae11519a6632a2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\nindex 0312da9ff..970789623 100644\n--- a/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n+++ b/core/src/main/java/org/apache/struts2/interceptor/ServletConfigInterceptor.java\n@@ -196,6 +196,12 @@ public class ServletConfigInterceptor extends AbstractInterceptor implements Str\n             ServletContext servletContext = (ServletContext) context.get(SERVLET_CONTEXT);\n             ((ServletContextAware) action).setServletContext(servletContext);\n         }\n+\n+        if (action instanceof org.apache.struts2.action.ServletContextAware) {\n+            ServletContext servletContext = (ServletContext) context.get(SERVLET_CONTEXT);\n+            ((org.apache.struts2.action.ServletContextAware) action).withServletContext(servletContext);\n+        }\n+\n         return invocation.invoke();\n     }\n }\n",
                            "security_relevancy": "potentially_security_relevant"
                        },
                        {
                            "sha": "13a717cc77155860d3be1316a661eb50c694b75f",
                            "filename": "core/src/main/java/org/apache/struts2/util/ServletContextAware.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Futil%2FServletContextAware.java?ref=b608549933bd2a6fa954ec35beae11519a6632a2",
                            "raw_url": "https://github.com/apache/struts/raw/b608549933bd2a6fa954ec35beae11519a6632a2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fstruts2%2Futil%2FServletContextAware.java",
                            "diff_file": "diff --git a/core/src/main/java/org/apache/struts2/util/ServletContextAware.java b/core/src/main/java/org/apache/struts2/util/ServletContextAware.java\nindex 7fed260c6..13a717cc7 100644\n--- a/core/src/main/java/org/apache/struts2/util/ServletContextAware.java\n+++ b/core/src/main/java/org/apache/struts2/util/ServletContextAware.java\n@@ -22,8 +22,15 @@ import javax.servlet.ServletContext;\n \n /**\n  * For components that have a dependence on the Servlet context.\n+ *\n+ * @deprecated please use {@link org.apache.struts2.action.ServletContextAware} instead\n  */\n+@Deprecated\n public interface ServletContextAware {\n \n+    /**\n+     * @deprecated please use {@link org.apache.struts2.action.ServletContextAware#withServletContext(ServletContext)} instead\n+     */\n+    @Deprecated\n     public void setServletContext(ServletContext context);\n }\n",
                            "security_relevancy": "not_security_relevant"
                        },
                        {
                            "sha": "20057e2351e76285ea1a8b7d5f992235948c04ac",
                            "filename": "core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java?ref=b608549933bd2a6fa954ec35beae11519a6632a2",
                            "raw_url": "https://github.com/apache/struts/raw/b608549933bd2a6fa954ec35beae11519a6632a2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fstruts2%2Finterceptor%2FServletConfigInterceptorTest.java",
                            "diff_file": "diff --git a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\nindex 4bb8684d9..20057e235 100644\n--- a/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n+++ b/core/src/test/java/org/apache/struts2/interceptor/ServletConfigInterceptorTest.java\n@@ -326,6 +326,22 @@ public class ServletConfigInterceptorTest extends StrutsInternalTestCase {\n         verify(mock);\n     }\n \n+    public void testActionServletContextAware() throws Exception {\n+        org.apache.struts2.action.ServletContextAware mock = createMock(org.apache.struts2.action.ServletContextAware.class);\n+\n+        MockActionInvocation mai = createActionInvocation(mock);\n+\n+        MockServletContext ctx = new MockServletContext();\n+        mai.getInvocationContext().put(StrutsStatics.SERVLET_CONTEXT, ctx);\n+\n+        mock.withServletContext(ctx);\n+        expectLastCall().times(1);\n+\n+        replay(mock);\n+        interceptor.intercept(mai);\n+        verify(mock);\n+    }\n+\n     private MockActionInvocation createActionInvocation(Object mock) {\n         MockActionInvocation mai = new MockActionInvocation();\n         mai.setResultCode(\"success\");\n",
                            "security_relevancy": "not_security_relevant"
                        }
                    ],
                    "pullrequest": 252,
                    "path": "commits\\apache\\struts\\252\\b608549933bd2a6fa954ec35beae11519a6632a2"
                }
            ]
        },
        {
            "url": "https://api.github.com/repos/apache/struts/pulls/142",
            "number": 142,
            "title": "WW-4805 Blocks ognl access to class members of Spring proxy",
            "issue_key": [
                "WW-4805"
            ],
            "issue": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13080558",
                    "id": "13080558",
                    "key": "WW-4805",
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                        "name": "Improvement"
                    },
                    "labels": [
                        "github-import",
                        "patch",
                        "security"
                    ],
                    "description": "This is a DoS attack example when Struts2 user uses Spring to secure his actions, like mentioned at section `Initializing Actions from Spring` of [spring-plugin|https://struts.apache.org/docs/spring-plugin.html]\n\nAttack Steps:\n# An anonymous user logins as an authenticated user.\n# Then tries\n{noformat}\nhttp://{ip}:{port}/{action0-actionN}?advisors[{0-n}].advice.accessDecisionManager.decisionVoters[{0-n}].rolePrefix=breakit\n{noformat}\n where {action0-actionN} are actions available for users\n\nAttack Impacts:\nBy replacing `rolePrefix`, attacker blocks access to secured actions for all defined roles even if they authenticate via login! so services are down and webapp restart is required to back to normal!!!\n\nConfiguration Example:\n* spring-security.xml\n{code:xml}\n    <global-method-security secured-annotations=\"enabled\" proxy-target-class = \"true\" />\n    <http auto-config=\"true\" use-expressions=\"false\">\n        <intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n    </http>\n    <authentication-manager erase-credentials=\"false\">\n        <authentication-provider>\n            <user-service>\n                <user name=\"admin\" password=\"admin\" authorities=\"ROLE_ADMIN\" />\n                <user name=\"user\" password=\"user\" authorities=\"ROLE_USER\" />\n            </user-service>\n        </authentication-provider>\n    </authentication-manager>\n{code}\n\n* applicationContext.xml\n{code:xml}\n<bean id=\"secureAction\" class=\"me.zamani.yasser.ww_convention.actions.SecureAction\"/>\n{code}\n\n* struts.xml\n{code:xml}\n        <action name=\"admin\" class=\"secureAction\" method=\"admin\">\n            <result name=\"success\" type=\"json\" />\n        </action>\n        <action name=\"user\" class=\"secureAction\" method=\"user\">\n            <result name=\"success\" type=\"json\" />\n        </action>\n{code}\n\n* SecureAction.java\n{code:java}\npackage me.zamani.yasser.ww_convention.actions;\nimport org.springframework.security.access.annotation.Secured;\n\npublic class SecureAction {\n\n    @Secured({\"ROLE_ADMIN\"})\n    public String admin() {\n        return \"success\";\n    }\n    @Secured({\"ROLE_USER\"})\n    public String user() {\n        return \"success\";\n    }\n}\n{code}\n\n* login via \n{noformat}\nhttp://{ip}:{port}/login\n{noformat}\n as user.\n\n* open \n{noformat}\nhttp://{ip}:{port}/user?advisors[0].advice.accessDecisionManager.decisionVoters[0].rolePrefix=breakit\n{noformat}\n\n* in another browser, login via \n{noformat}\nhttp://{ip}:{port}/login\n{noformat}\n as admin.\n\n* try to access \n{noformat}\nhttp://{ip}:{port}/admin\n{noformat}\n which fails!\n\n* also repeat 5 and try open\n{noformat}\n http://{ip}:{port}/user\n{noformat}\n which also fails!\n\n* Services are down and webapp restart is required to back to normal.",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "name": "Closed"
                    },
                    "created": "2017-06-17T02:23:52.000+0000",
                    "updated": "2017-07-13T19:28:48.000+0000",
                    "resolved": null,
                    "prlinks": [
                        "https://github.com/apache/struts/pull/142",
                        "https://github.com/apache/struts/pull/145",
                        "https://github.com/apache/struts/pull/147"
                    ],
                    "commitlinks": [],
                    "commits": null
                }
            ],
            "commits": [
                {
                    "sha": "2a8a6869d0d8ed5c9a4a49d036a5e3c6d837fada",
                    "message": "Blocks ognl access to class members of Spring proxy",
                    "files": [
                        {
                            "sha": "9b03881b25c8089bd98d34ab01593c63c92c2532",
                            "filename": "core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fognl%2FSecurityMemberAccess.java?ref=2a8a6869d0d8ed5c9a4a49d036a5e3c6d837fada",
                            "raw_url": "https://github.com/apache/struts/raw/2a8a6869d0d8ed5c9a4a49d036a5e3c6d837fada/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fognl%2FSecurityMemberAccess.java",
                            "security_relevancy": "The code seems to be part of a security-related customization, possibly to restrict access to certain types of members in OGNL expressions.",
                            "diff_file": "diff --git a/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java b/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\nindex 234fb5bd1..9b03881b2 100644\n--- a/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\n+++ b/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\n@@ -15,12 +15,14 @@\n  */\n package com.opensymphony.xwork2.ognl;\n \n+import com.opensymphony.xwork2.util.ProxyUtil;\n import ognl.DefaultMemberAccess;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+import org.apache.commons.lang3.reflect.MethodUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n-import java.lang.reflect.Member;\n-import java.lang.reflect.Modifier;\n+import java.lang.reflect.*;\n import java.util.Collections;\n import java.util.Map;\n import java.util.Set;\n@@ -85,6 +87,11 @@ public class SecurityMemberAccess extends DefaultMemberAccess {\n             return false;\n         }\n \n+        if (isProxyAccess(target, member)) {\n+            LOG.warn(\"Access to proxy [{}] is blocked!\", member);\n+            return false;\n+        }\n+\n         boolean allow = true;\n         if (!checkStaticMethodAccess(member)) {\n             LOG.warn(\"Access to static [{}] is blocked!\", member);\n@@ -100,6 +107,23 @@ public class SecurityMemberAccess extends DefaultMemberAccess {\n         return super.isAccessible(context, target, member, propertyName) && isAcceptableProperty(propertyName);\n     }\n \n+    protected boolean isProxyAccess(Object target, Member member) {\n+        if (!ProxyUtil.isSpringAopProxy(target))\n+            return false;\n+        Class<?> clazz = ProxyUtil.springUltimateTargetClass(target);\n+        if (member instanceof Method) {\n+            return null == MethodUtils.getMatchingMethod(clazz, member.getName(), ((Method) member).getParameterTypes());\n+        }\n+        if (member instanceof Field) {\n+            return null == FieldUtils.getField(clazz, member.getName(), true);\n+        }\n+        if (member instanceof Constructor) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     protected boolean checkStaticMethodAccess(Member member) {\n         int modifiers = member.getModifiers();\n         if (Modifier.isStatic(modifiers)) {\n"
                        },
                        {
                            "sha": "84d000cd20ddc3d905ebac4c3db12095e223c98f",
                            "filename": "core/src/test/java/com/opensymphony/xwork2/spring/ActionsFromSpringTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fspring%2FActionsFromSpringTest.java?ref=2a8a6869d0d8ed5c9a4a49d036a5e3c6d837fada",
                            "raw_url": "https://github.com/apache/struts/raw/2a8a6869d0d8ed5c9a4a49d036a5e3c6d837fada/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fspring%2FActionsFromSpringTest.java",
                            "diff_file": "diff --git a/core/src/test/java/com/opensymphony/xwork2/spring/ActionsFromSpringTest.java b/core/src/test/java/com/opensymphony/xwork2/spring/ActionsFromSpringTest.java\nindex f31a61404..84d000cd2 100644\n--- a/core/src/test/java/com/opensymphony/xwork2/spring/ActionsFromSpringTest.java\n+++ b/core/src/test/java/com/opensymphony/xwork2/spring/ActionsFromSpringTest.java\n@@ -5,8 +5,13 @@ package com.opensymphony.xwork2.spring;\n \n import com.opensymphony.xwork2.*;\n import com.opensymphony.xwork2.config.providers.XmlConfigurationProvider;\n+import org.apache.commons.lang3.reflect.MethodUtils;\n+import org.apache.struts2.dispatcher.HttpParameters;\n import org.springframework.context.ApplicationContext;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n /**\n  * Test loading actions from the Spring Application Context.\n  *\n@@ -100,4 +105,26 @@ public class ActionsFromSpringTest extends XWorkTestCase {\n         assertEquals(1, chaintoAOPedAction.getCount());\n         assertEquals(\"WW-4105\", chaintoAOPedAction.getName());\n     }\n+\n+    public void testProxiedActionIsNotAccessible() throws Exception {\n+        // given\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"exposeProxy\", \"true\");\n+        params.put(\"issueId\", \"S2-047\");\n+\n+        HashMap<String, Object> extraContext = new HashMap<>();\n+        extraContext.put(ActionContext.PARAMETERS, HttpParameters.create(params).build());\n+\n+        ActionProxy proxy = actionProxyFactory.createActionProxy(null,\n+                \"chaintoAOPedTestSubBeanAction\", null, extraContext);\n+\n+        // when\n+        proxy.execute();\n+        Object action = proxy.getAction();\n+\n+        //then\n+        assertEquals(\"S2-047\", ((TestSubBean) action).getIssueId());\n+        assertFalse(\"proxied action is accessible!\",\n+                (boolean) MethodUtils.invokeMethod(action, \"isExposeProxy\"));\n+    }\n }\n",
                            "security_relevancy": ""
                        }
                    ],
                    "pullrequest": 142,
                    "path": "commits\\apache\\struts\\142\\2a8a6869d0d8ed5c9a4a49d036a5e3c6d837fada"
                },
                {
                    "sha": "56f31bec42365c31788739a14c89343b9db65605",
                    "message": "Hides Spring concepts behind ProxyUtil",
                    "files": [
                        {
                            "sha": "67f593955093d35b2001d2607e3a03c36bf85135",
                            "filename": "core/src/main/java/com/opensymphony/xwork2/interceptor/ChainingInterceptor.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Finterceptor%2FChainingInterceptor.java?ref=56f31bec42365c31788739a14c89343b9db65605",
                            "raw_url": "https://github.com/apache/struts/raw/56f31bec42365c31788739a14c89343b9db65605/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Finterceptor%2FChainingInterceptor.java",
                            "diff_file": "diff --git a/core/src/main/java/com/opensymphony/xwork2/interceptor/ChainingInterceptor.java b/core/src/main/java/com/opensymphony/xwork2/interceptor/ChainingInterceptor.java\nindex 430edcc1a..67f593955 100644\n--- a/core/src/main/java/com/opensymphony/xwork2/interceptor/ChainingInterceptor.java\n+++ b/core/src/main/java/com/opensymphony/xwork2/interceptor/ChainingInterceptor.java\n@@ -164,8 +164,8 @@ public class ChainingInterceptor extends AbstractInterceptor {\n             if (shouldCopy(object)) {\n                 Object action = invocation.getAction();\n                 Class<?> editable = null;\n-                if(ProxyUtil.isSpringAopProxy(action)) {\n-                    editable = ProxyUtil.springUltimateTargetClass(action);\n+                if(ProxyUtil.isProxy(action)) {\n+                    editable = ProxyUtil.ultimateTargetClass(action);\n                 }\n                 reflectionProvider.copy(object, action, ctxMap, prepareExcludes(), includes, editable);\n             }\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "02c53d84043aac6792b0eb96ff46bf80fcaee770",
                            "filename": "core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fognl%2FSecurityMemberAccess.java?ref=56f31bec42365c31788739a14c89343b9db65605",
                            "raw_url": "https://github.com/apache/struts/raw/56f31bec42365c31788739a14c89343b9db65605/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fognl%2FSecurityMemberAccess.java",
                            "diff_file": "diff --git a/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java b/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\nindex 9b03881b2..02c53d840 100644\n--- a/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\n+++ b/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\n@@ -108,9 +108,9 @@ public class SecurityMemberAccess extends DefaultMemberAccess {\n     }\n \n     protected boolean isProxyAccess(Object target, Member member) {\n-        if (!ProxyUtil.isSpringAopProxy(target))\n+        if (!ProxyUtil.isProxy(target))\n             return false;\n-        Class<?> clazz = ProxyUtil.springUltimateTargetClass(target);\n+        Class<?> clazz = ProxyUtil.ultimateTargetClass(target);\n         if (member instanceof Method) {\n             return null == MethodUtils.getMatchingMethod(clazz, member.getName(), ((Method) member).getParameterTypes());\n         }\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "afda5082442bdd6ba7a6cd68e9385f89abc7c134",
                            "filename": "core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Futil%2FProxyUtil.java?ref=56f31bec42365c31788739a14c89343b9db65605",
                            "raw_url": "https://github.com/apache/struts/raw/56f31bec42365c31788739a14c89343b9db65605/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Futil%2FProxyUtil.java",
                            "diff_file": "diff --git a/core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java b/core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java\nindex a3f874054..afda50824 100644\n--- a/core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java\n+++ b/core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java\n@@ -32,6 +32,34 @@ public class ProxyUtil {\n     private static final String SPRING_SINGLETONTARGETSOURCE_CLASS_NAME = \"org.springframework.aop.target.SingletonTargetSource\";\n     private static final String SPRING_TARGETCLASSAWARE_CLASS_NAME = \"org.springframework.aop.TargetClassAware\";\n \n+    /**\n+     * Determine the ultimate target class of the given instance, traversing\n+     * not only a top-level proxy but any number of nested proxies as well &mdash;\n+     * as long as possible without side effects.\n+     * @param candidate the instance to check (might be a proxy)\n+     * @return the ultimate target class (or the plain class of the given\n+     * object as fallback; never {@code null})\n+     */\n+    public static Class<?> ultimateTargetClass(Object candidate) {\n+        Class<?> result = null;\n+        if (isSpringAopProxy(candidate))\n+            result = springUltimateTargetClass(candidate);\n+\n+        if (result == null) {\n+            result = candidate.getClass();\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Check whether the given object is a proxy.\n+     * @param object the object to check\n+     */\n+    public static boolean isProxy(Object object) {\n+        return isSpringAopProxy(object);\n+    }\n+\n     /**\n      * Determine the ultimate target class of the given spring bean instance, traversing\n      * not only a top-level spring proxy but any number of nested spring proxies as well &mdash;\n@@ -40,7 +68,7 @@ public class ProxyUtil {\n      * @return the ultimate target class (or the plain class of the given\n      * object as fallback; never {@code null})\n      */\n-    public static Class<?> springUltimateTargetClass(Object candidate) {\n+    private static Class<?> springUltimateTargetClass(Object candidate) {\n         Object current = candidate;\n         Class<?> result = null;\n         while (null != current && implementsInterface(current.getClass(), SPRING_TARGETCLASSAWARE_CLASS_NAME)) {\n@@ -61,7 +89,7 @@ public class ProxyUtil {\n      * Check whether the given object is a Spring proxy.\n      * @param object the object to check\n      */\n-    public static boolean isSpringAopProxy(Object object) {\n+    private static boolean isSpringAopProxy(Object object) {\n         Class<?> clazz = object.getClass();\n         return (implementsInterface(clazz, SPRING_SPRINGPROXY_CLASS_NAME) && (Proxy.isProxyClass(clazz)\n                 || isCglibProxyClass(clazz)));\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "106e62d4afb0eb563aa5f38b8acc072590d14f7d",
                            "filename": "core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fspring%2FSpringProxyUtilTest.java?ref=56f31bec42365c31788739a14c89343b9db65605",
                            "raw_url": "https://github.com/apache/struts/raw/56f31bec42365c31788739a14c89343b9db65605/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fspring%2FSpringProxyUtilTest.java",
                            "diff_file": "diff --git a/core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java b/core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java\nindex 7ae98833e..106e62d4a 100644\n--- a/core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java\n+++ b/core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java\n@@ -37,49 +37,49 @@ public class SpringProxyUtilTest extends XWorkTestCase {\n         appContext = ((SpringObjectFactory)container.getInstance(ObjectFactory.class)).appContext;\n     }\n \n-    public void testIsSpringAopProxy() throws Exception {\n+    public void testIsProxy() throws Exception {\n         Object simpleAction = appContext.getBean(\"simple-action\");\n-        assertFalse(ProxyUtil.isSpringAopProxy(simpleAction));\n+        assertFalse(ProxyUtil.isProxy(simpleAction));\n \n         Object proxiedAction = appContext.getBean(\"proxied-action\");\n-        assertTrue(ProxyUtil.isSpringAopProxy(proxiedAction));\n+        assertTrue(ProxyUtil.isProxy(proxiedAction));\n \n         Object autoProxiedAction = appContext.getBean(\"auto-proxied-action\");\n-        assertTrue(ProxyUtil.isSpringAopProxy(autoProxiedAction));\n+        assertTrue(ProxyUtil.isProxy(autoProxiedAction));\n \n         Object pointcuttedTestBean = appContext.getBean(\"pointcutted-test-bean\");\n-        assertTrue(ProxyUtil.isSpringAopProxy(pointcuttedTestBean));\n+        assertTrue(ProxyUtil.isProxy(pointcuttedTestBean));\n \n         Object pointcuttedTestSubBean = appContext.getBean(\"pointcutted-test-sub-bean\");\n-        assertTrue(ProxyUtil.isSpringAopProxy(pointcuttedTestSubBean));\n+        assertTrue(ProxyUtil.isProxy(pointcuttedTestSubBean));\n \n         Object testAspect = appContext.getBean(\"test-aspect\");\n-        assertFalse(ProxyUtil.isSpringAopProxy(testAspect));\n+        assertFalse(ProxyUtil.isProxy(testAspect));\n     }\n \n-    public void testSpringUltimateTargetClass() throws Exception {\n+    public void testUltimateTargetClass() throws Exception {\n         Object simpleAction = appContext.getBean(\"simple-action\");\n-        Class<?> simpleActionUltimateTargetClass = ProxyUtil.springUltimateTargetClass(simpleAction);\n+        Class<?> simpleActionUltimateTargetClass = ProxyUtil.ultimateTargetClass(simpleAction);\n         assertEquals(SimpleAction.class, simpleActionUltimateTargetClass);\n \n         Object proxiedAction = appContext.getBean(\"proxied-action\");\n-        Class<?> proxiedActionUltimateTargetClass = ProxyUtil.springUltimateTargetClass(proxiedAction);\n+        Class<?> proxiedActionUltimateTargetClass = ProxyUtil.ultimateTargetClass(proxiedAction);\n         assertEquals(SimpleAction.class, proxiedActionUltimateTargetClass);\n \n         Object autoProxiedAction = appContext.getBean(\"auto-proxied-action\");\n-        Class<?> autoProxiedActionUltimateTargetClass = ProxyUtil.springUltimateTargetClass(autoProxiedAction);\n+        Class<?> autoProxiedActionUltimateTargetClass = ProxyUtil.ultimateTargetClass(autoProxiedAction);\n         assertEquals(SimpleAction.class, autoProxiedActionUltimateTargetClass);\n \n         Object pointcuttedTestBean = appContext.getBean(\"pointcutted-test-bean\");\n-        Class<?> pointcuttedTestBeanUltimateTargetClass = ProxyUtil.springUltimateTargetClass(pointcuttedTestBean);\n+        Class<?> pointcuttedTestBeanUltimateTargetClass = ProxyUtil.ultimateTargetClass(pointcuttedTestBean);\n         assertEquals(TestBean.class, pointcuttedTestBeanUltimateTargetClass);\n \n         Object pointcuttedTestSubBean = appContext.getBean(\"pointcutted-test-sub-bean\");\n-        Class<?> pointcuttedTestSubBeanUltimateTargetClass = ProxyUtil.springUltimateTargetClass(pointcuttedTestSubBean);\n+        Class<?> pointcuttedTestSubBeanUltimateTargetClass = ProxyUtil.ultimateTargetClass(pointcuttedTestSubBean);\n         assertEquals(TestSubBean.class, pointcuttedTestSubBeanUltimateTargetClass);\n \n         Object testAspect = appContext.getBean(\"test-aspect\");\n-        Class<?> testAspectUltimateTargetClass = ProxyUtil.springUltimateTargetClass(testAspect);\n+        Class<?> testAspectUltimateTargetClass = ProxyUtil.ultimateTargetClass(testAspect);\n         assertEquals(TestAspect.class, testAspectUltimateTargetClass);\n     }\n }\n",
                            "security_relevancy": ""
                        }
                    ],
                    "pullrequest": 142,
                    "path": "commits\\apache\\struts\\142\\56f31bec42365c31788739a14c89343b9db65605"
                },
                {
                    "sha": "7987c38d5a65700501eddd1fb0cb1a288921ecd2",
                    "message": "Improves two previous commit, by performance and bug safety",
                    "files": [
                        {
                            "sha": "cce09cbacb1f98ce369966a581b9faee7272946d",
                            "filename": "core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fognl%2FSecurityMemberAccess.java?ref=7987c38d5a65700501eddd1fb0cb1a288921ecd2",
                            "raw_url": "https://github.com/apache/struts/raw/7987c38d5a65700501eddd1fb0cb1a288921ecd2/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fognl%2FSecurityMemberAccess.java",
                            "diff_file": "diff --git a/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java b/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\nindex 02c53d840..cce09cbac 100644\n--- a/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\n+++ b/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java\n@@ -17,8 +17,6 @@ package com.opensymphony.xwork2.ognl;\n \n import com.opensymphony.xwork2.util.ProxyUtil;\n import ognl.DefaultMemberAccess;\n-import org.apache.commons.lang3.reflect.FieldUtils;\n-import org.apache.commons.lang3.reflect.MethodUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n@@ -87,7 +85,7 @@ public class SecurityMemberAccess extends DefaultMemberAccess {\n             return false;\n         }\n \n-        if (isProxyAccess(target, member)) {\n+        if (ProxyUtil.isProxyMember(member, target)) {\n             LOG.warn(\"Access to proxy [{}] is blocked!\", member);\n             return false;\n         }\n@@ -107,23 +105,6 @@ public class SecurityMemberAccess extends DefaultMemberAccess {\n         return super.isAccessible(context, target, member, propertyName) && isAcceptableProperty(propertyName);\n     }\n \n-    protected boolean isProxyAccess(Object target, Member member) {\n-        if (!ProxyUtil.isProxy(target))\n-            return false;\n-        Class<?> clazz = ProxyUtil.ultimateTargetClass(target);\n-        if (member instanceof Method) {\n-            return null == MethodUtils.getMatchingMethod(clazz, member.getName(), ((Method) member).getParameterTypes());\n-        }\n-        if (member instanceof Field) {\n-            return null == FieldUtils.getField(clazz, member.getName(), true);\n-        }\n-        if (member instanceof Constructor) {\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n     protected boolean checkStaticMethodAccess(Member member) {\n         int modifiers = member.getModifiers();\n         if (Modifier.isStatic(modifiers)) {\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "83e727cd31ac0c8233e6c0e91edb8efcf6e5d630",
                            "filename": "core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Futil%2FProxyUtil.java?ref=7987c38d5a65700501eddd1fb0cb1a288921ecd2",
                            "raw_url": "https://github.com/apache/struts/raw/7987c38d5a65700501eddd1fb0cb1a288921ecd2/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Futil%2FProxyUtil.java",
                            "diff_file": "diff --git a/core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java b/core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java\nindex afda50824..83e727cd3 100644\n--- a/core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java\n+++ b/core/src/main/java/com/opensymphony/xwork2/util/ProxyUtil.java\n@@ -15,9 +15,11 @@\n  */\n package com.opensymphony.xwork2.util;\n \n+import org.apache.commons.lang3.reflect.ConstructorUtils;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n import org.apache.commons.lang3.reflect.MethodUtils;\n \n-import java.lang.reflect.Proxy;\n+import java.lang.reflect.*;\n \n /**\n  * <code>ProxyUtil</code>\n@@ -60,6 +62,18 @@ public class ProxyUtil {\n         return isSpringAopProxy(object);\n     }\n \n+    /**\n+     * Check whether the given member is a proxy member of a proxy object.\n+     * @param member the member to check\n+     * @param object the object to check\n+     */\n+    public static boolean isProxyMember(Member member, Object object) {\n+        if (!isProxy(object))\n+            return false;\n+\n+        return isSpringProxyMember(member);\n+    }\n+\n     /**\n      * Determine the ultimate target class of the given spring bean instance, traversing\n      * not only a top-level spring proxy but any number of nested spring proxies as well &mdash;\n@@ -95,6 +109,27 @@ public class ProxyUtil {\n                 || isCglibProxyClass(clazz)));\n     }\n \n+    /**\n+     * Check whether the given member is a member of a spring proxy.\n+     * @param member the member to check\n+     */\n+    private static boolean isSpringProxyMember(Member member) {\n+        try {\n+            Class<?> clazz = ClassLoaderUtil.loadClass(SPRING_ADVISED_CLASS_NAME, ProxyUtil.class);\n+            if (hasMember(clazz, member))\n+                return true;\n+            clazz = ClassLoaderUtil.loadClass(SPRING_TARGETCLASSAWARE_CLASS_NAME, ProxyUtil.class);\n+            if (hasMember(clazz, member))\n+                return true;\n+            clazz = ClassLoaderUtil.loadClass(SPRING_SPRINGPROXY_CLASS_NAME, ProxyUtil.class);\n+            if (hasMember(clazz, member))\n+                return true;\n+        } catch (ClassNotFoundException ignored) {\n+        }\n+\n+        return false;\n+    }\n+\n     /**\n      * Obtain the singleton target object behind the given spring proxy, if any.\n      * @param candidate the (potential) spring proxy to check\n@@ -136,4 +171,23 @@ public class ProxyUtil {\n             return false;\n         }\n     }\n+\n+    /**\n+     * Check whether the given class has a given member.\n+     * @param clazz the class to check\n+     * @param member the member to check\n+     */\n+    private static boolean hasMember(Class<?> clazz, Member member) {\n+        if (member instanceof Method) {\n+            return null != MethodUtils.getMatchingMethod(clazz, member.getName(), ((Method) member).getParameterTypes());\n+        }\n+        if (member instanceof Field) {\n+            return null != FieldUtils.getField(clazz, member.getName(), true);\n+        }\n+        if (member instanceof Constructor) {\n+            return null != ConstructorUtils.getMatchingAccessibleConstructor(clazz, ((Constructor) member).getParameterTypes());\n+        }\n+\n+        return false;\n+    }\n }\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "42aee89dee05654fe15ec8b87562c0b64f7b288e",
                            "filename": "core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fspring%2FSpringProxyUtilTest.java?ref=7987c38d5a65700501eddd1fb0cb1a288921ecd2",
                            "raw_url": "https://github.com/apache/struts/raw/7987c38d5a65700501eddd1fb0cb1a288921ecd2/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fspring%2FSpringProxyUtilTest.java",
                            "diff_file": "diff --git a/core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java b/core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java\nindex 106e62d4a..42aee89de 100644\n--- a/core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java\n+++ b/core/src/test/java/com/opensymphony/xwork2/spring/SpringProxyUtilTest.java\n@@ -82,4 +82,30 @@ public class SpringProxyUtilTest extends XWorkTestCase {\n         Class<?> testAspectUltimateTargetClass = ProxyUtil.ultimateTargetClass(testAspect);\n         assertEquals(TestAspect.class, testAspectUltimateTargetClass);\n     }\n+\n+    public void testIsProxyMember() throws Exception {\n+        Object simpleAction = appContext.getBean(\"simple-action\");\n+        assertFalse(ProxyUtil.isProxyMember(\n+                simpleAction.getClass().getMethod(\"setName\", String.class), simpleAction));\n+\n+        Object proxiedAction = appContext.getBean(\"proxied-action\");\n+        assertTrue(ProxyUtil.isProxyMember(\n+                proxiedAction.getClass().getMethod(\"setExposeProxy\", boolean.class), proxiedAction));\n+\n+        Object autoProxiedAction = appContext.getBean(\"auto-proxied-action\");\n+        assertTrue(ProxyUtil.isProxyMember(\n+                autoProxiedAction.getClass().getMethod(\"getTargetClass\"), autoProxiedAction));\n+\n+        Object pointcuttedTestBean = appContext.getBean(\"pointcutted-test-bean\");\n+        assertTrue(ProxyUtil.isProxyMember(\n+                pointcuttedTestBean.getClass().getMethod(\"getTargetSource\"), pointcuttedTestBean));\n+\n+        Object pointcuttedTestSubBean = appContext.getBean(\"pointcutted-test-sub-bean\");\n+        assertFalse(ProxyUtil.isProxyMember(\n+                pointcuttedTestSubBean.getClass().getConstructor(), pointcuttedTestSubBean));\n+\n+        Object testAspect = appContext.getBean(\"test-aspect\");\n+        assertFalse(ProxyUtil.isProxyMember(\n+                testAspect.getClass().getMethod(\"setExposeProxy\", boolean.class), testAspect));\n+    }\n }\n",
                            "security_relevancy": ""
                        },
                        {
                            "sha": "ef2ec7c276a5c86c64049d056fda2402fb291002",
                            "filename": "core/src/test/java/com/opensymphony/xwork2/spring/TestAspect.java",
                            "status": "modified",
                            "contents_url": "https://api.github.com/repos/apache/struts/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fspring%2FTestAspect.java?ref=7987c38d5a65700501eddd1fb0cb1a288921ecd2",
                            "raw_url": "https://github.com/apache/struts/raw/7987c38d5a65700501eddd1fb0cb1a288921ecd2/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fopensymphony%2Fxwork2%2Fspring%2FTestAspect.java",
                            "diff_file": "diff --git a/core/src/test/java/com/opensymphony/xwork2/spring/TestAspect.java b/core/src/test/java/com/opensymphony/xwork2/spring/TestAspect.java\nindex a428c6588..ef2ec7c27 100644\n--- a/core/src/test/java/com/opensymphony/xwork2/spring/TestAspect.java\n+++ b/core/src/test/java/com/opensymphony/xwork2/spring/TestAspect.java\n@@ -7,6 +7,7 @@ public class TestAspect {\n \tprivate int count;\n \tprivate String name;\n \tprivate int count2;\n+    private boolean exposeProxy;\n \n \tString getIssueId() {\n \t\treturn issueId;\n@@ -43,4 +44,8 @@ public class TestAspect {\n \t\tlog = log + \"setCount2(\" + count2 + \")-\";\n \t\tthis.count2 = count2;\n \t}\n+\n+    public void setExposeProxy(boolean exposeProxy) {\n+        this.exposeProxy = exposeProxy;\n+    }\n }\n",
                            "security_relevancy": ""
                        }
                    ],
                    "pullrequest": 142,
                    "path": "commits\\apache\\struts\\142\\7987c38d5a65700501eddd1fb0cb1a288921ecd2"
                }
            ]
        }
    ]
}